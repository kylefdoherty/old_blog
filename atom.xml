<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Programming <br> & <br> Stuff]]></title>
  <link href="http://kylefdoherty.github.io/atom.xml" rel="self"/>
  <link href="http://kylefdoherty.github.io/"/>
  <updated>2014-01-30T17:37:04+01:00</updated>
  <id>http://kylefdoherty.github.io/</id>
  <author>
    <name><![CDATA[Kyle Doherty]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Procs are Amazing!]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/01/30/ruby-procs-are-amazing/"/>
    <updated>2014-01-30T15:12:44+01:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/01/30/ruby-procs-are-amazing</id>
    <content type="html"><![CDATA[<p>I just got through the <a href="http://www.codecademy.com/courses/ruby-beginner-en-L3ZCI/1/1?curriculum_id=5059f8619189a5000201fbcb" target="_blank">Codeacademy Procs section</a> and got so excited I tweeted about them and emailed my girlfriend explaining what Procs are and why they’re so cool&hellip;bad I know.  Luckily she works in finance and is a total excel geek so she can empathize and won’t think I’m a complete weirdo.</p>

<p><img class="center" src="http://kylefdoherty.github.io/images/proc_tweet.png" title="Proc Tweet" alt="Tweet about how cool Ruby Procs are"></p>

<p><img class="center" src="http://kylefdoherty.github.io/images/proc_email.png" title="Proc Email" alt="Email about how cool Ruby Procs are"></p>

<p>Since I already tweeted and sent an email about Procs I figured I’d post about them to round things out.</p>

<h2>Why Procs are Cool</h2>


<p>Procs allow you to save a block of code, something like <code>{ |x| x *3 }</code> which is saying take whatever I give you (x) and multiply it by 3.  What you can then do with this is pass it to methods.</p>

<p>So for example, I have an array of people&rsquo;s heights, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">4</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And I want to get all the heights that are above 4 feet tall because that&rsquo;s how tall you have to be to ride the ride&hellip;le duh.</p>

<p>I could write some long method called <code>rubyover_4_feet</code> where I pass it the array and then it returns the heights that are above 4 feet tall.  But that would require 9 lines of code&hellip;maybe less but that&rsquo;s how many lines it took me.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">over_4_feet</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>    <span class="n">new_arr</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>        <span class="k">unless</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span>
</span><span class='line'>            <span class="n">new_arr</span> <span class="o">&lt;&lt;</span> <span class="n">i</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">new_arr</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead I can call the method <code>.select</code> on the array and pass it a Proc that tells it to only select heights that are taller than 4 feet.</p>

<p>Below is a proc that checks for being over 4 feet tall. Then I just pass that proc to the <code>.select</code> method telling it to only &ldquo;select&rdquo; heights over 4 feet.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">over_4_feet</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">4</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="o">&amp;</span><span class="n">over_4_feet</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So what took me 9 lines of code I did in 1, since passing the Proc to select is the same as calling the over_4_feet method.</p>

<h3>AMAZING!!!</h3>


<p><a href="http://gifsoup.com/view/2169429/nets-fan.html" target="_blank"><img src="http://stream1.gifsoup.com/view3/2169429/nets-fan-o.gif" border="0"/></a><br /><a href="http://gifsoup.com" title="GIFSoup" target="_blank"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quite Your Job, Move to Switzerland, Learn to Program]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/01/30/quite-your-job-move-to-switzerland-learn-to-program/"/>
    <updated>2014-01-30T10:57:24+01:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/01/30/quite-your-job-move-to-switzerland-learn-to-program</id>
    <content type="html"><![CDATA[<p>A little over two weeks ago I tried to quit my job, moved to Switzerland, and began teaching myself programming with the goal of switching careers and becoming a developer full time.  I say “tried to quit my job” because I did officially quit, had my exit interview, the whole 9 yards, but then at the last minute was asked by our CMO to remain on part time and work remotely from Switzerland managing an internal project.</p>

<p>This turned out to be extremely fortuitous as part of the project requires me to build a Box.com app that automatically generates folder templates in the company’s Box account.  So while continueing to work part time will eat into my programming self study, nearly half of that time will be devoted to building a Box.com app with ruby, not to mention I’ll no longer be hemoraging my savings away each month as intially thought :).</p>

<p>I now spend Monday thru Friday from 9am to 7pm at the public library in the Swiss city where I live learning to program and so far it’s going swimmingly.</p>

<p><img class="center" src="http://kylefdoherty.github.io/images/public_library.jpg" title="Public Library" alt="An image of the public library where I study"></p>

<p>You might still be wondering how the Switzerland move came about. That was complete happenstance.  I had already made my mind up about quitting my job and learning programming full time when my girlfriend got a new job with a Swiss company and was required to do a 6 month rotation in Switzerland.  Since she was going and I was planning on quiting there seemed no reason not to spend my time studying programming in Switzerland and skiing and eating fondu on the weekends, especially now that I have some income from working part time.</p>

<h3>
    This blog is a place for me to write about how my homeschooling is progressing, what I’m learning, and other musings.  I hope it will not only facilitate in my learning, since writing about and teaching a topic is one of the best ways to learn, but maybe be helpful for other current and future self schooling programmers.
</h3>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeacademy Redactor Problem - Think About The Following...]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/01/30/codeacademy-redactor-problem-think-about-the-following-dot-dot-dot/"/>
    <updated>2014-01-30T10:45:04+01:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/01/30/codeacademy-redactor-problem-think-about-the-following-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>At the end of the Redacted! project in Codeacademy’s Ruby track they ask you to think about a few things:</p>

<p>What could you do to make sure your redactor redacts a word regardless of whether it&rsquo;s uppercase or lowercase?
How could you make your program take multiple, separate words to REDACT?
How might you make a new redacted string and save it as a variable, rather than just printing it to the console?
Below I’ve shown how I solved each of these so other people doing this problem can see how I solved it, critique my code, and share their solutions.</p>

<p>As a starting point here is my code for the initial Redacted project before I began solving for the above questions.</p>

<figure class='code'><figcaption><span>Original code:</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;block of text:&quot;</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;word to be redacted:&quot;</span>
</span><span class='line'><span class="n">redact</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="n">redact</span>
</span><span class='line'>        <span class="nb">print</span> <span class="s2">&quot;REDACTED &quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nb">print</span> <span class="n">word</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<h2>Question #1 - What could you do to make sure your redactor redacts a word regardless of whether it&#8217;s uppercase or lowercase?</h2>


<p>To achieve this I figured I had two options.  Either downcase (or upcase) the block of text and the word(s) to be redacted given by the user as soon as they’re given by the user or do this when they are being compared.  Below are both ways.</p>

<figure class='code'><figcaption><span>When given by user:</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;block of text:&quot;</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;word to be redacted:&quot;</span>
</span><span class='line'><span class="n">redact</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="n">redact</span>
</span><span class='line'>        <span class="nb">print</span> <span class="s2">&quot;REDACTED &quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nb">print</span> <span class="n">word</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>When comparing:</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;block of text:&quot;</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;word to be redacted:&quot;</span>
</span><span class='line'><span class="n">redact</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">word</span><span class="o">.</span><span class="n">downcase</span> <span class="o">==</span> <span class="n">redact</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>        <span class="nb">print</span> <span class="s2">&quot;REDACTED &quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nb">print</span> <span class="n">word</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<h2>Question #2 - How could you make your program take multiple, separate words to REDACT?</h2>


<p>First I need to make it so the user can input as many words to be redacted as they want.  To achieve this I used a while loop and an if statement.  If the user inputs a keyword signifying they are done inputting words to be redacted the while loop breaks.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">while</span> <span class="n">input</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">input</span><span class="o">.</span><span class="n">downcase</span> <span class="o">==</span> <span class="s2">&quot;done&quot;</span>
</span><span class='line'>      <span class="k">break</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">redact</span> <span class="o">&lt;&lt;</span> <span class="n">input</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here I make “done” the keyword that breaks the while loop.</p>

<p>Next, I needed to figure out how to compare the two arrays, redact and words.  Funny enough after a quick search on comparing two arrays I found out that using &amp; is one way to compare two arrays and see what objects they have in common (<a href="http://blog.hulihanapplications.com/browse/view/28-ruby-array-comparison-tricks">http://blog.hulihanapplications.com/browse/view/28-ruby-array-comparison-tricks</a>).  So if you write redact &amp; words the output will be the objects they have in common.  I thought this was interesting but didn’t really help me because it basically just recreated my redact array.
Next I broke down what I need to do in plain english, hoping that would help me break down the problem and figure out how to solve it with the little ruby I know and myabe a little help from Google.
Breaking it Down
The first thing I know I needed to do was loop through the words array with .each and then see if that word matches any words in the redact array.  So effectively what I’m doing is comparing a string to an array.  With a google search of “compare a string to an array ruby” I found that there is an .include? method for arrays that does exactly this (<a href="http://stackoverflow.com/questions/3770316/how-to-compare-a-string-against-multiple-other-strings">http://stackoverflow.com/questions/3770316/how-to-compare-a-string-against-multiple-other-strings</a>).  It works by calling the .include? method on the array and passing it a string. It then checks to see if that string is included in the array.  PERFECT!</p>

<p>Here is what it looks like in code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">words</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">redact</span><span class="o">.</span><span class="n">include?</span> <span class="n">word</span>
</span><span class='line'>    <span class="nb">print</span> <span class="s2">&quot;REDACTED &quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">print</span> <span class="n">word</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here is the entire script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">redact</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;block of text:&quot;</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Give as many words to be redacted as you want.&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Once you are done type </span><span class="se">\&#39;</span><span class="s2">done</span><span class="se">\&#39;</span><span class="s2">.&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Please give the words you want redacted:&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="n">input</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">input</span><span class="o">.</span><span class="n">downcase</span> <span class="o">==</span> <span class="s2">&quot;done&quot;</span>
</span><span class='line'>      <span class="k">break</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">redact</span> <span class="o">&lt;&lt;</span> <span class="n">input</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#common_words = redact &amp; words</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">redact</span><span class="o">.</span><span class="n">include?</span> <span class="n">word</span>
</span><span class='line'>    <span class="nb">print</span> <span class="s2">&quot;REDACTED &quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">print</span> <span class="n">word</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<h2>Question #3 - How might you make a new redacted string and save it as a variable, rather than just printing it to the console?</h2>


<p>I skipped this question because it didn’t seem to make sense for my script.  Since I allow the user to input multiple strings to redact that are then saved in the array redact there seems to be no reason to save a new redacted string.  What would you do with it?
If you have a better sense of what they are asking here please let me know.</p>
]]></content>
  </entry>
  
</feed>
