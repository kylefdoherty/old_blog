<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Programming <br> & <br> Stuff]]></title>
  <link href="http://kylefdoherty.github.io/atom.xml" rel="self"/>
  <link href="http://kylefdoherty.github.io/"/>
  <updated>2014-06-26T23:41:39-04:00</updated>
  <id>http://kylefdoherty.github.io/</id>
  <author>
    <name><![CDATA[Kyle Doherty]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Close Reading Code]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/06/26/close-reading-code/"/>
    <updated>2014-06-26T08:38:53-04:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/06/26/close-reading-code</id>
    <content type="html"><![CDATA[<h2>TL;DR</h2>

<p><strong>If you’re a rookie programmer like me your programming level is here:</strong></p>

<br>


<p><img class="center" src="http://kylefdoherty.github.io/images/baby.jpg">
<strong>And you want to be at this level:</strong></p>

<br>


<p><img class="center" src="http://kylefdoherty.github.io/images/ironic.jpg"></p>

<p><strong>Use <a href="http://writingcenter.fas.harvard.edu/pages/how-do-close-reading" target="_blank">close reading techniques</a> to level up your coding skills.</strong></p>

<h2>Learning to Code Well == Learning to Write Well</h2>

<p>When I decided I wanted to become a programmer back in January I spent a lot of time thinking about the act of learning and what were the best ways to learn to program.  This meant I also spent a lot of time researching the topic on the interwebs and the advice I kept coming across was, <strong>“you need to write a lot of code and read even more.”</strong> This is when I started forcing myself to read other people’s code.</p>

<p>Then at the start of Flatiron School, Avi (the dean) described our coding ability one day as “Baby Talk.”  I thought this was a fair metaphor, but it also made me think about how learning to code well is like learning to write well.  One of the best ways to improve your writing skills is to use a technique called close reading, which transfers nicely to learning to program.</p>

<h2>WTF is Close Reading</h2>

<p><a href="http://writingcenter.fas.harvard.edu/pages/how-do-close-reading" target="_blank">Close reading</a> is defined by <a href="http://en.wikipedia.org/wiki/Close_reading"target="_blank">wikipedia</a> as, &ldquo;the careful, sustained interpretation of a brief passage of text. Such a reading places great emphasis on the single particular over the general, paying close attention to individual words, syntax, and the order in which sentences and ideas unfold as they are read.&rdquo;</p>

<p><img class="center" src="http://kylefdoherty.github.io/images/close_reading.JPG"></p>

<p>Often close reading is used to better understand an academic text so you can compose an essay about it.  However, it can also be used to improve your reading and writing skills, because you’re paying close attention to vocabulary, sentence structure, style, etc. and begin to incorporate this into your own writing. This technique was especially helpful for me while studying in Chile and having to read academic papers in Spanish on topics such as the 1973 Arab–Israeli War and Business Operations.  At the time my Spanish was at a 7th grade level at best and these papers were 12 grade plus.  Thus, I spent a ton of time meticulously going through my assigned readings with pen, highlighter and Google to breakdown complex sentences, lookup words I didn’t know, and take notes detailed notes. This paid huge dividends down the road, helping me level up on my Spanish reading and writing skills&hellip;not that I still have them, but hey I did at one time.</p>

<h2>How to Close Read Code</h2>

<p>The way I close read code is similar to how I read an academic paper, except instead of paper and pen, I use my text editor and IRB.  While I’m reading through complex code I write comments above or next to each line, explaining in detail what is going on. And if I don&rsquo;t understand what&rsquo;s going on I just look it up in the Doc, throw it in IRB or use Pry, or I go to the Google.  With one or a combo of these you should be able to figure out what&rsquo;s goign on.</p>

<p>Here&rsquo;s an example of my detailed comments for a section of a Student class from a recent Flatiron lab:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Student</span>
</span><span class='line'>  <span class="c1">#setting the attributes of the student class to a class instance variable </span>
</span><span class='line'>  <span class="no">ATTRIBUTES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="s2">&quot;INTEGER PRIMARY KEY&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;TEXT&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:tagline</span> <span class="o">=&gt;</span> <span class="s2">&quot;TEXT&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:github</span> <span class="o">=&gt;</span>  <span class="s2">&quot;TEXT&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:twitter</span> <span class="o">=&gt;</span>  <span class="s2">&quot;TEXT&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:blog_url</span> <span class="o">=&gt;</span>  <span class="s2">&quot;TEXT&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:image_url</span>  <span class="o">=&gt;</span> <span class="s2">&quot;TEXT&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:biography</span> <span class="o">=&gt;</span>  <span class="s2">&quot;TEXT&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ATTRIBUTES.keys.each do |attribute|</span>
</span><span class='line'>  <span class="c1">#   attr_accessor attribute</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#creating the attr_accessor by taking the keys from the ATTRIBUTES hash</span>
</span><span class='line'>  <span class="c1">#which returns an array and sending that array to the attr_accessor </span>
</span><span class='line'>  <span class="c1">#method with the splat operator.  This &#39;explodes&#39; the array into individual </span>
</span><span class='line'>  <span class="c1">#elements which are passed to the method</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="o">*</span><span class="no">ATTRIBUTES</span><span class="o">.</span><span class="n">keys</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#creates an empty students table by creating a SQL statment </span>
</span><span class='line'>  <span class="c1">#and assigning it to a variable and then passing that sql var to </span>
</span><span class='line'>  <span class="c1">#DB[:conn].execute. Inside the CREATE TABLE block</span>
</span><span class='line'>  <span class="c1">#the method .schema_defininition is being called in order to insert the </span>
</span><span class='line'>  <span class="c1">#correct columns in the table (see schema definition below for explination)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create_table</span>
</span><span class='line'>    <span class="n">sql</span> <span class="o">=</span> <span class="o">&lt;&lt;-</span><span class="no">SQL</span>
</span><span class='line'><span class="sh">    CREATE TABLE IF NOT EXISTS #{self.table_name} (</span>
</span><span class='line'><span class="sh">        #{schema_definition}               </span>
</span><span class='line'><span class="sh">        )</span>
</span><span class='line'><span class="no">    SQL</span>
</span><span class='line'>    <span class="no">DB</span><span class="o">[</span><span class="ss">:conn</span><span class="o">].</span><span class="n">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>(All the <a href="https://gist.github.com/kylefdoherty/3f16da77103ff13b4c4d" target="_blank">code</a> for the Student class)</p>

<p>As you can see I try to explain exactly what is going on in detail so I&rsquo;m aboslutely sure what&rsquo;s going on.</p>

<h2>Use the Code You Read</h2>

<p>After you’ve read through and commented out what each line of code is doing, don’t stop there. I like to play with what I&rsquo;ve learned in IRB to help me internalize it or rebuild it on my own.</p>

<p>For example, a week before Flatiron School started I learned a bit of Javascript and decided to try building a countdown to the first day of school. Google led me to this <a href"http://blog.smalldo.gs/2013/12/create-simple-countdown/" target="_blank">tutorial</a> which I disected line by line with comments for what was goign on.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">h1</span> <span class="nx">id</span><span class="o">=</span><span class="s1">&#39;countdown-holder&#39;</span><span class="o">&gt;</span><span class="nx">Coutndown</span> <span class="nx">goes</span> <span class="nx">here</span><span class="o">!&lt;</span><span class="err">/h1&gt; </span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!--</span> <span class="nx">creating</span> <span class="nx">an</span> <span class="nx">h1</span> <span class="nx">tag</span> <span class="nx">wtih</span> <span class="nx">the</span> <span class="nx">id</span> <span class="s1">&#39;countdown-holder&#39;</span>
</span><span class='line'><span class="nx">so</span> <span class="nx">it</span> <span class="nx">can</span> <span class="nx">be</span> <span class="nx">targeted</span> <span class="nx">by</span> <span class="nx">JS</span> <span class="kd">with</span> <span class="nx">the</span> <span class="p">.</span><span class="nx">getElementById</span> <span class="nx">method</span><span class="o">--&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;http://smalldo.gs/js/countdown.min.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt; </span>
</span><span class='line'>
</span><span class='line'> <span class="c">&lt;!--</span> <span class="nx">including</span> <span class="nx">the</span> <span class="nx">countdown</span><span class="p">.</span><span class="nx">js</span> <span class="nx">script</span><span class="o">--&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">clock</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;countdown-holder&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//setting a variable named clock to &#39;document.getElementById&#39; which is the method .getElementById being called on the &#39;document&#39; (the html file). The id we&#39;re telling it to get is &quot;countdown-holder&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">,</span> <span class="nx">targetDate</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span><span class="mi">05</span><span class="p">,</span><span class="mi">02</span><span class="p">,</span><span class="mi">09</span><span class="p">,</span><span class="mi">00</span><span class="p">,</span><span class="mi">00</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//setting a var named targetDate to a new date object with the date of June 2, 2015 at 9:00 am</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">clock</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">countdown</span><span class="p">(</span><span class="nx">targetDate</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// calling the .innerHTML method on clock to replace the h1 text with the countdown targetDate converted to a string</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">clock</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">countdown</span><span class="p">(</span><span class="nx">targetDate</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}),</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// the setInterval method executes a function over and over again, at specified time intervals. Here we&#39;re resetting the clock.innerHTML variable every second (1000 milliseconds in a second)</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After getting a good understanding of what was going on, I tried coding it by myself and got this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;http://smalldo.gs/js/countdown.min.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt; </span>
</span><span class='line'>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Flatiron</span> <span class="nx">Ruby005</span> <span class="nx">Countdown</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">h2</span> <span class="nx">id</span><span class="o">=</span><span class="s1">&#39;countdown-holder&#39;</span><span class="o">&gt;</span><span class="nx">Countdown</span> <span class="nx">goes</span> <span class="nx">here</span><span class="o">!&lt;</span><span class="err">/h2&gt; </span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">endDate</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span><span class="mi">05</span><span class="p">,</span><span class="mi">02</span><span class="p">,</span><span class="mi">09</span><span class="p">,</span><span class="mi">00</span><span class="p">,</span><span class="mi">00</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">timeSpan</span> <span class="o">=</span> <span class="nx">countdown</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">endDate</span> <span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">clock</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;countdown-holder&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">timer</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">timeSpan</span> <span class="o">=</span> <span class="nx">countdown</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">endDate</span> <span class="p">));</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">timeSpan</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">timer</span><span class="p">);</span> <span class="c1">// need to find a way to set timespan at the global level so even after someone refreshes the page the timer doesn&#39;t run and the new clock text appears</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">clock</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">countdown</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">endDate</span> <span class="p">).</span><span class="nx">toString</span><span class="p">());</span>
</span><span class='line'>  <span class="p">},</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This got me close to a working countdown script but wasn&rsquo;t quite working.  With a little help from <a href="https://twitter.com/ttsiege" target="_blank">Tristen</a> I was able to refactor my code and get it working.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;http://smalldo.gs/js/countdown.min.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt; </span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Flatiron</span> <span class="nx">Ruby005</span> <span class="nx">Countdown</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">h2</span> <span class="nx">id</span><span class="o">=</span><span class="s1">&#39;countdown-holder&#39;</span><span class="o">&gt;</span><span class="nx">Countdown</span> <span class="nx">goes</span> <span class="nx">here</span><span class="o">!&lt;</span><span class="err">/h2&gt; </span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">timer</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">endDate</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span><span class="mi">05</span><span class="p">,</span><span class="mi">02</span><span class="p">,</span><span class="mi">09</span><span class="p">,</span><span class="mi">00</span><span class="p">,</span><span class="mi">00</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">clock</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;countdown-holder&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">gif</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;gif&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">timeSpan</span> <span class="o">=</span> <span class="nx">countdown</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">endDate</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// breaks recursion</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">timeSpan</span><span class="p">.</span><span class="nx">value</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">timer</span><span class="p">);</span> <span class="c1">// need to find a way to set timespan at the global level so even after someone refreshes the page the timer doesn&#39;t run and the new clock text appears</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">clock</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&quot;Flatiron Ruby005 Has Begun!&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">clock</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">timeSpan</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">},</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Close reading the original countdown code and then recoding it myself helped me grasp on a much deeper level how to declare JS variables, JS functions &amp; function scope, and JS conventions, such as declaring multiple variables at once.</p>

<h2>Final Thoughts</h2>

<p>I know for me forcing myself to take the time to close read code is something I still struggle with, but I can honestly say this has helped me improve my code substantially. If you take the time to read code line by line, add detailed comments explaining what&rsquo;s going on, and then use it, it will pay off huge down the road.</p>

<h2>Resources on Learning &amp; Learning to Program I like</h2>

<ul>
<li><p><a href="http://rubyrogues.com/131-rr-how-to-learn/" target="_blank">Ruby Rogues 131 &ndash; How to Learn</a></p></li>
<li><p><a href="http://www.uvm.edu/~pdodds/files/papers/others/2007/ericsson2007a.pdf" target="_blank">HBR &ndash; The Making of an Expert</a></p></li>
<li><p><a href="http://www.gamedev.net/blog/355/entry-2250592-become-a-good-programmer-in-six-really-hard-steps/" target="_blank">Become a Good Programmer in Six Really Hard Steps</a></p></li>
<li><p><a href="http://catgrena.de/careers/2013/10/15/standing-out-from-the-crowd.html" target="_blank">Standing Our From the Crowd</a></p></li>
<li><p><a href="http://rubyrogues.com/159-rr-hacking-education-with-saron-yitbarek/" target="_blank">Ruby Rogues 159 &ndash; Hacking Education with Saron Yitbarek (Flatiron School Alum)</a></p></li>
<li><p><a href="https://www.youtube.com/watch?v=mW_xKGUKLpk" target="_blank">Reading Code Good &ndash; Saron&rsquo;s RailsConf2014 Talk</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Inject Basics]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/06/13/ruby-inject-basics/"/>
    <updated>2014-06-13T00:06:01-04:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/06/13/ruby-inject-basics</id>
    <content type="html"><![CDATA[<p>This week during lecture at Flatiron school, <a href="https://twitter.com/aviflombaum" target="_blank">Avi</a> showed us Ruby’s <code>.inject</code> method (also known as .reduce).  I thought this seemed like a pretty cool and potentially powerful method and decided to do a bit more research so I could start using it with confidence in my code.</p>

<h2>How Inject Works</h2>

<p><code>.inject</code> is an iterator method (technically an enumerable method) that creates an accumulator variable that “accumulates” whatever you want as you iterate over some sort of collection and returns the accumulator when the iteration is complete.</p>

<p>Instead of trying to explain further let’s take a peek at a simple example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">].</span><span class="n">inject</span> <span class="k">do</span> <span class="o">|</span><span class="n">accumulator</span><span class="p">,</span> <span class="n">element</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;accumulator: </span><span class="si">#{</span><span class="n">accumulator</span><span class="si">}</span><span class="s2">, element: </span><span class="si">#{</span><span class="n">element</span><span class="si">}</span><span class="s2"> - </span>
</span><span class='line'><span class="s2">  Adding them: </span><span class="si">#{</span><span class="n">accumulator</span><span class="si">}</span><span class="s2"> +  </span><span class="si">#{</span><span class="n">element</span><span class="si">}</span><span class="s2"> = </span><span class="si">#{</span><span class="n">accumulator</span> <span class="o">+</span> <span class="n">element</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">accumulator</span> <span class="o">+</span> <span class="n">element</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; accumulator: 1, element: 2 - Adding them: 1 +  2 = 3</span>
</span><span class='line'><span class="c1">#=&gt; accumulator: 3, element: 3 - Adding them: 3 +  3 = 6</span>
</span><span class='line'><span class="c1">#=&gt; accumulator: 6, element: 4 - Adding them: 6 +  4 = 10</span>
</span><span class='line'><span class="c1">#=&gt;  =&gt; 10 </span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we can see we’re iterating over the array and adding the element to the accumulator each time through.  If you look at the output from the puts you can see that the accumulator starts at 1, the first element in the array, and the element variable is given the 2nd element of the array.  As it iterates through the array, the sum becomes the accumulator’s value and then is returned at the end of the iteration.</p>

<p>Here’s that same example but this time we’re multiplying the elements in the array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">].</span><span class="n">inject</span> <span class="k">do</span> <span class="o">|</span><span class="n">accumulator</span><span class="p">,</span> <span class="n">element</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;accumulator: </span><span class="si">#{</span><span class="n">accumulator</span><span class="si">}</span><span class="s2">, element: </span><span class="si">#{</span><span class="n">element</span><span class="si">}</span><span class="s2"> - </span>
</span><span class='line'><span class="s2">  Mulitplying them:</span><span class="si">#{</span><span class="n">accumulator</span><span class="si">}</span><span class="s2"> *  </span><span class="si">#{</span><span class="n">element</span><span class="si">}</span><span class="s2"> = </span><span class="si">#{</span><span class="n">accumulator</span> <span class="o">*</span> <span class="n">element</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">accumulator</span> <span class="o">*</span> <span class="n">element</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; accumulator: 1, element: 2 - Mulitplying them: 1 *  2 = 2</span>
</span><span class='line'><span class="c1">#=&gt; accumulator: 2, element: 3 - Mulitplying them: 2 *  3 = 6</span>
</span><span class='line'><span class="c1">#=&gt; accumulator: 6, element: 4 - Mulitplying them: 6 *  4 = 24</span>
</span><span class='line'><span class="c1">#=&gt;  =&gt; 24 </span>
</span></code></pre></td></tr></table></div></figure>


<h2>Giving the Accumulator a Starting Value</h2>

<p>In the last two examples we’re not giving the accumulator a starting value, however we have the option to do this by passing the value to the .inject method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">accumulator</span><span class="p">,</span> <span class="n">element</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;accumulator: </span><span class="si">#{</span><span class="n">accumulator</span><span class="si">}</span><span class="s2">, element: </span><span class="si">#{</span><span class="n">element</span><span class="si">}</span><span class="s2"> - </span>
</span><span class='line'><span class="s2">  Adding them: </span><span class="si">#{</span><span class="n">accumulator</span><span class="si">}</span><span class="s2"> +  </span><span class="si">#{</span><span class="n">element</span><span class="si">}</span><span class="s2"> = </span><span class="si">#{</span><span class="n">accumulator</span> <span class="o">+</span> <span class="n">element</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">accumulator</span> <span class="o">+</span> <span class="n">element</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; accumulator: 0, element: 1 - Adding them: 0 +  1 = 1</span>
</span><span class='line'><span class="c1">#=&gt; accumulator: 1, element: 2 - Adding them: 1 +  2 = 3</span>
</span><span class='line'><span class="c1">#=&gt; accumulator: 3, element: 3 - Adding them: 3 +  3 = 6</span>
</span><span class='line'><span class="c1">#=&gt; accumulator: 6, element: 4 - Adding them: 6 +  4 = 10</span>
</span><span class='line'><span class="c1">#=&gt;  =&gt; 10 </span>
</span></code></pre></td></tr></table></div></figure>


<p>This time we’re summing the contents of the array, like in the first example, but we’re giving the inject method a value to set the accumulator to.  Here we’ve set it to 0, but you can set it to anything you want.  You can see from the output that the accumulator starts at 0 and the element variable is set to the first element in the array, 1.</p>

<p>But why do we want to set the accumulator to 0?  This is just making us loop through one additional time?</p>

<p>For this summing example, this is true but if we we’re doing something to the element on each iteration, like say incrementing it by two, we need to give the accumulator variable a starting value.  If we don’t then it uses the first element in the array, we can’t increment it, and thus don’t get the return value we want.</p>

<p>Here’s a look at this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">##### Giving the Accumulator a Starting Value #####</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">accumulator</span><span class="p">,</span> <span class="n">element</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;accumulator: </span><span class="si">#{</span><span class="n">accumulator</span><span class="si">}</span><span class="s2">, element + 2: </span><span class="si">#{</span><span class="n">element</span> <span class="o">+</span> <span class="mi">2</span><span class="si">}</span><span class="s2"> - Adding them: </span><span class="si">#{</span><span class="n">accumulator</span><span class="si">}</span><span class="s2"> +  </span><span class="si">#{</span><span class="n">element</span> <span class="o">+</span> <span class="mi">2</span><span class="si">}</span><span class="s2"> = </span><span class="si">#{</span><span class="n">accumulator</span> <span class="o">+</span> <span class="p">(</span><span class="n">element</span> <span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">accumulator</span> <span class="o">+</span> <span class="p">(</span><span class="n">element</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; accumulator: 0,   (element + 2):  3 - Adding them:   0 +  3 = 3</span>
</span><span class='line'><span class="c1">#=&gt; accumulator: 3,   (element + 2):  4 - Adding them:   3 +  4 = 7</span>
</span><span class='line'><span class="c1">#=&gt; accumulator: 7,   (element + 2):  5 - Adding them:   7 +  5 = 12</span>
</span><span class='line'><span class="c1">#=&gt; accumulator: 12, (element + 2):  6 - Adding them: 12 +  6 = 18</span>
</span><span class='line'><span class="c1">#=&gt; =&gt;18</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">##### Omitting a Starting Value #####</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">].</span><span class="n">inject</span> <span class="k">do</span> <span class="o">|</span><span class="n">accumulator</span><span class="p">,</span> <span class="n">element</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;accumulator: </span><span class="si">#{</span><span class="n">accumulator</span><span class="si">}</span><span class="s2">, element + 2: </span><span class="si">#{</span><span class="n">element</span> <span class="o">+</span> <span class="mi">2</span><span class="si">}</span><span class="s2"> - Adding them: </span><span class="si">#{</span><span class="n">accumulator</span><span class="si">}</span><span class="s2"> +  </span><span class="si">#{</span><span class="n">element</span> <span class="o">+</span> <span class="mi">2</span><span class="si">}</span><span class="s2"> = </span><span class="si">#{</span><span class="n">accumulator</span> <span class="o">+</span> <span class="p">(</span><span class="n">element</span> <span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">accumulator</span> <span class="o">+</span> <span class="p">(</span><span class="n">element</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; accumulator: 1,   (element + 2):  4 - Adding them:   1 +  4 = 5</span>
</span><span class='line'><span class="c1">#=&gt; accumulator: 5,   (element + 2):  5 - Adding them:   5 +  5 = 10</span>
</span><span class='line'><span class="c1">#=&gt; accumulator: 10, (element + 2):  6 - Adding them: 10 +  6 = 16</span>
</span><span class='line'><span class="c1">#=&gt; =&gt;16</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see that if we don’t set the accumulator to 0 we don’t increment the first element by 2 and thus get 16 when we really wanted 18.  Because of this, it’s probably a good idea to get in the habit of setting the accumulator value no matter what.</p>

<h2>Altering Hashes</h2>

<p>Another use case for .inject (.reduce) is if you need to change the key or value in a hash.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">hash_of_state_capitals</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;CA&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Sacramento&quot;</span><span class="p">,</span> <span class="s2">&quot;NY&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Albany&quot;</span><span class="p">,</span> <span class="s2">&quot;ND&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Bismarck&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">hash_of_state_capitals</span> <span class="o">=</span> <span class="n">hash_of_state_capitals</span><span class="o">.</span><span class="n">reduce</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="n">new_hash</span><span class="p">,</span> <span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">capital</span><span class="p">)</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">new_hash</span><span class="o">[</span><span class="n">state</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]</span> <span class="o">=</span> <span class="n">capital</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">new_hash</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt;  {:CA=&gt;&quot;Sacramento&quot;, :NY=&gt;&quot;Albany&quot;, :ND=&gt;&quot;Bismarck&quot;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, we have a <code>hash_of_state_capitals</code> whose keys are strings, and we want to change them to symbols.</p>

<p>This time around, instead of setting the accumulator to a number we’re setting it to an empty hash ( <code>hash_of_state_capitals.reduce({})</code> ), which we’re calling “new_hash”.  Then each time we loop through the hash_of_state_capitals we create the new_hash by setting the key to the <code>state.to_sym</code> and the value to capital.  Then at the bottom we return the new hash, which is a must, and will throw an error if you don’t.</p>

<p>This method of altering a hash is a bit cleaner than using <code>.each</code> and can actually be done on a single line.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">hash_of_state_capitals</span> <span class="o">=</span> <span class="n">hash_of_state_capitals</span><span class="o">.</span><span class="n">reduce</span><span class="p">({})</span>  <span class="p">{</span><span class="o">|</span><span class="n">new_hash</span><span class="p">,</span> <span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">capital</span><span class="p">)</span><span class="o">|</span> <span class="n">new_hash</span><span class="o">[</span><span class="n">state</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]</span> <span class="o">=</span> <span class="n">capital</span><span class="p">;</span> <span class="n">new_hash</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">### OR ###</span>
</span><span class='line'>
</span><span class='line'><span class="n">hash_of_state_capitals</span> <span class="o">=</span> <span class="n">hash_of_state_capitals</span><span class="o">.</span><span class="n">reduce</span><span class="p">({})</span>  <span class="p">{</span><span class="o">|</span><span class="n">new_hash</span><span class="p">,</span> <span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">capital</span><span class="p">)</span><span class="o">|</span> <span class="n">new_hash</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">state</span><span class="o">.</span><span class="n">to_sym</span> <span class="o">=&gt;</span> <span class="n">capital</span><span class="p">)}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Building Arrays &amp; Hashes</h2>

<p>You can use inject to build arrays and hashes similar to how you use other methods such as .map or .select.  The advantage that inject has over these is you can use inject instead of chaining several methods together. This isn’t a big deal if you’re chaining just two methods together to achieve whatever you’re doing but your code could get messy if you go beyond that.</p>

<p>Here is a great example from <a href= "http://blog.jayfields.com/2008/03/ruby-inject.html" target="_blank">Jay Fields’ blog post</a> on Inject demonstrating how to use <code>.inject</code> to get all the integers of an array, that are even, as strings.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">### Chaining Select &amp; Collect ###</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="o">].</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">element</span><span class="o">|</span> <span class="n">element</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">element</span><span class="o">|</span> <span class="n">element</span><span class="o">.</span><span class="n">to_s</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; [&quot;2&quot;, &quot;4&quot;, &quot;6&quot;]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">### Using Inject ###</span>
</span><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">result</span><span class="p">,</span> <span class="n">element</span><span class="o">|</span>
</span><span class='line'> <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">element</span><span class="o">.</span><span class="n">to_s</span> <span class="k">if</span> <span class="n">element</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'> <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; array =  [&quot;2&quot;, &quot;4&quot;, &quot;6&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>An example of building a hash would be if you received an array with nested arrays, that you wanted to convert into a hash as key, value pairs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">students</span> <span class="o">=</span> <span class="o">[[</span><span class="mo">01</span><span class="p">,</span> <span class="s2">&quot;Jon&quot;</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mo">02</span><span class="p">,</span> <span class="s2">&quot;Becca&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mo">03</span><span class="p">,</span> <span class="s2">&quot;Pete&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mo">04</span><span class="p">,</span> <span class="s2">&quot;Laura&quot;</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'><span class="n">students_hash</span> <span class="o">=</span> <span class="n">students</span><span class="o">.</span><span class="n">reduce</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="n">students</span><span class="p">,</span> <span class="n">array</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">students</span><span class="o">[</span><span class="n">array</span><span class="o">.</span><span class="n">first</span><span class="o">]</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">students</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; {1=&gt;&quot;Jon&quot;, 2=&gt;&quot;Becca&quot;, 3=&gt;&quot;Pete&quot;, 4=&gt;&quot;Laura&quot;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
Here we have student’s IDs and names given to us as an array of arrays, but we want to convert this to a hash.  The inject method takes care of this in a nice compact way, without having to create empty variables outside our loop.</p>

<p>Finally here is an example from the anagram_detector lab we did today.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">anamgrams</span> <span class="o">=</span> <span class="sx">%w(gallery ballerina regally clergy largely leading)</span>
</span><span class='line'>
</span><span class='line'><span class="n">word</span> <span class="o">=</span> <span class="s1">&#39;allergy&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Anagram</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:word</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">word</span> <span class="o">=</span> <span class="n">word</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">word_sorter</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
</span><span class='line'>    <span class="n">word</span><span class="o">.</span><span class="n">chars</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">match</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>    <span class="n">array</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">array</span><span class="p">,</span> <span class="n">element</span><span class="o">|</span>
</span><span class='line'>      <span class="n">array</span> <span class="o">&lt;&lt;</span> <span class="n">element</span> <span class="k">if</span> <span class="n">word_sorter</span><span class="p">(</span><span class="n">element</span><span class="p">)</span> <span class="o">==</span> <span class="n">word_sorter</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
</span><span class='line'>      <span class="n">array</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># def match(array)</span>
</span><span class='line'>  <span class="c1">#   array.select do |element|</span>
</span><span class='line'>  <span class="c1">#     word_sorter(element) == word_sorter(word)</span>
</span><span class='line'>  <span class="c1">#   end </span>
</span><span class='line'>  <span class="c1"># end </span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="no">Anagram</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">a</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">anamgrams</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; [&quot;gallery&quot;, &quot;regally&quot;, &quot;largely&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see in my commented out code that you can do the same thing with the <code>.select</code> method but I think inject is almost as elegant and gives us the ability to do additional things that <code>.select</code> can’t.  Such as, build a hash with the returned strings or manipulate the strings further.</p>

<h2>That’s All Folks</h2>

<p>And that’s all I’ve got on Ruby’s Inject for now.  From what I’ve read it seems <code>.inject</code> becomes even more powerful when you start using it with objects but that’s for another blog post.  To learn more below are links to all the blog posts I referenced for writing this post and I suggest reading them if you want to learn more.</p>

<h2>Additional Resources:</h2>

<ul>
<li><p><a href= "http://blog.jayfields.com/2008/03/ruby-inject.html" target="_blank">Ruby Inject &ndash; Jay Fields’ Thoughts</a></p></li>
<li><p><a href="http://www.sitepoint.com/guide-ruby-collections-iii-enumerable-enumerator/"" target="_blank">A Guide to Ruby Collections III: Enumerable and Enumerator &ndash; Sitepoint</a></p></li>
<li><p><a href="http://blog.teamtreehouse.com/ruby-arrays" target="_blank">The Basics of Ruby Arrays &ndash; Team Treehouse Blog</a></p></li>
<li><p><a href="http://chrisholtz.com/blog/lets-make-a-ruby-hash-map-method-that-returns-a-hash-instead-of-an-array/"" target="_blank">Let&rsquo;s Make a Ruby Hash Map Method That Returns a Hash Instead of an Array</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn to Program by Blogging]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/05/28/learn-to-program-by-blogging/"/>
    <updated>2014-05-28T19:33:37-04:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/05/28/learn-to-program-by-blogging</id>
    <content type="html"><![CDATA[<p>Last week I was explaining to some of my <a href="http://flatironschool.com/">Flatiron School</a> Ruby005 compadres how blogging is helping me learn Ruby.  To help re-motivate myself to start blogging again (it’s been a while) and to motivate others, below is my logic for using a blog to help you learn faster.</p>

<h2>Know Your Audience</h2>


<p>Before I get into why blogging helps you learn to program, one of the basics of blogging is knowing who your audience is. In my opinion your audience for now is&hellip;YOU!</p>

<p>Maybe your blog will instantly take off and have millions of readers, but more likely it will be like mine and you&rsquo;ll be lucky if your Mom reads it. With this in mind I don&rsquo;t worry about whether the content I write is unique and interesting, (though I try to make it interesting) instead I focus on whether or not it will help me learn more about programming.</p>

<h2>Why Blogging Will Help You Learn to Program</h2>


<p>Now that you know who you&rsquo;re writing for the biggest reason I think people don’t want to blog is they’re worried about taking time away from coding.  I know I thought this, but I promise blogging will force you to code more, read more code, and make you better at programming.</p>

<p>So without further ado, here are my reseasons for why you should blog to help you learn to program.</p>

<ol>
  <li><strong>Forces in Depth Research -</strong> if you start writing about fundamental topics, such as Ruby’s File class, it’ll require you to research that topic vigorously. This results in you reading multiple blog posts, book chapters, and lots of code.

  I doubt many people read my File class post, but now I truly understand how to use it and even better I use that post as a quick reference when coding.</li><br>

  <li><strong>Forces Practice -</strong> if you really want to grasp something well enough to blog about it, you need to practice using it i.e. you need to code. While learning about control flow in Ruby I practiced using: If Else, Case statements, and the ternary operator, and learned when to use each.</li><br>

  <li><strong>Forces Reflection -</strong> For one of my personal projects I blogged about each milestone I reached.  For instance if I added a Command Line Interface to my app I blogged about it.  This meant I had to go back through my code and reflect on why I wrote it that way.  You should be doing this anyways but blogging about it forced me to really scrutinize my code, highlighted errors, and always left me with improved knowledge and skills.</li><br>

  <li><strong>Creates References -</strong> I already mentioned this in #1 but I think it warrants its own spot in this list.  Once you’ve written a post on a topic you can refer back to it anytime.  This reduces time spent brushing up on a topic because you know exactly where to find your post.</li><br>

  <li><strong>Creates a Timeline of Your Progress -</strong> by blogging consistently while you’re learning to program, you’re chronicling the evolution of your skills. Seeing my progress from post to post has been incredibly rewarding and keeps me motivated. 

  I’ve also been told that potential employers like to see this as well, so if a side effect is it helps me/you get a job, SWEET!</li>
</ol>


<p>That’s all I got.  If you got nothing from the 550+ words above then just remember this, smart people say if you want to become a good programmer, you need to write a lot of code and read even more than you write.  And I say if you start blogging about coding, you’ll achieve both of those.</p>

<p>Happy Blogging!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Notes - Structs]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/03/07/structs/"/>
    <updated>2014-03-07T10:11:19-05:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/03/07/structs</id>
    <content type="html"><![CDATA[<p>I recently learned about Structs while working my way through <a href="http://pragmaticstudio.com/courses" target="_blank">Pragmatic Studio’s Ruby Programming course</a>, which I highly recommend btw.  If you’re a beginner like me it will apply your basic Ruby knowledge to a project and teach you some new things along the way&hellip;like Structs.</p>

<h2>What Are Structs</h2>


<p>Structs are simply a collection of attributes, meaning they only have state, whereas Classes have both attributes and methods (state and behavior).  To illustrate imagine we have a library class containing a bunch of book objects (its state) that you can check out and do other things to (its behavior). This type of object, since it has state and behavior warrants using a class.</p>

<figure class='code'><figcaption><span>Library Class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Library</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@books</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">checkout</span>
</span><span class='line'>    <span class="c1"># code to checkout a book</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, let’s assume the book objects the library class will contain won’t have any behavior i.e. they won’t have methods, they’ll simply have attributes such as: <code>@title</code>, <code>@author</code>, and <code>@page_number</code>.  We could create a book class like this:</p>

<figure class='code'><figcaption><span>Book Class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Book</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:author</span><span class="p">,</span> <span class="ss">:page_number</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">author</span><span class="p">,</span> <span class="n">page_number</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@title</span> <span class="o">=</span> <span class="n">title</span>
</span><span class='line'>    <span class="vi">@author</span> <span class="o">=</span> <span class="n">author</span>
</span><span class='line'>    <span class="vi">@page_number</span> <span class="o">=</span> <span class="n">page_number</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>OR since the book object has no methods we can use a Struct like so:</p>

<figure class='code'><figcaption><span>Book Struct</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Book</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:title</span><span class="p">,</span> <span class="ss">:author</span><span class="p">,</span> <span class="ss">:page_number</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; Book </span>
</span><span class='line'>
</span><span class='line'><span class="no">Book</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="c1">#=&gt; Class</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using a Struct required far less code than writing out the book class ourselves and by calling <code>.class</code> on Book we can see that <code>Struct.new</code> actually went and generated the book class we made above for us&hellip;pretty cool huh!</p>

<h2>Create Object Instances</h2>


<p>With this Book class we can create as many new book objects as we want by calling <code>Book.new</code> and passing it a title, author, and number of pages, like below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">book1</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="err">“</span><span class="no">Learn</span> <span class="n">to</span> <span class="no">Program</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="no">Chris</span> <span class="no">Pine</span><span class="err">”</span><span class="p">,</span> <span class="mi">171</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; &lt;struct Book title=&quot;Learn to Program&quot;, author=&quot;Chris Pine&quot;, page_number=171&gt; </span>
</span><span class='line'>
</span><span class='line'><span class="n">book2</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="err">“</span><span class="no">The</span> <span class="no">Well</span> <span class="no">Grounded</span> <span class="no">Rubyist</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="no">David</span> <span class="n">A</span><span class="o">.</span> <span class="no">Black</span><span class="err">”</span><span class="p">,</span> <span class="mi">500</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; &lt;struct Book title=&quot;The Well Grounded Rubyist&quot;, author=&quot;David A. Black&quot;, page_number=500&gt; </span>
</span><span class='line'>
</span><span class='line'><span class="n">book3</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="err">“</span><span class="no">Programming</span> <span class="no">Ruby</span> <span class="mi">1</span><span class="o">.</span><span class="mi">9</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">:</span> <span class="no">The</span> <span class="no">Pragmatic</span> <span class="no">Programmers</span> <span class="no">Guide</span> <span class="p">(</span><span class="no">The</span> <span class="no">Facets</span> <span class="n">of</span> <span class="no">Ruby</span><span class="p">)</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="no">Dave</span> <span class="no">Thomas</span><span class="p">,</span> <span class="no">Andy</span> <span class="no">Hunt</span><span class="p">,</span> <span class="no">Chris</span> <span class="no">Fowler</span><span class="err">”</span><span class="p">,</span> <span class="mi">888</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; &lt;struct Book title=&quot;Programming Ruby 1.9 &amp; 2.0: The Pragmatic Programmers&#39; Guide (The Facets of Ruby)&quot;, author=&quot;Dave Thomas, Andy Hunt, Chris Fowler&quot;, page_number=888&gt; </span>
</span></code></pre></td></tr></table></div></figure>


<p>This code instantiated 3 new book objects each with readable and writable attributes.  One interesting thing about these book objects is they are actually Struct objects and therefore have some handy struct methods for accessing their attributes.</p>

<h2>Accessing Attributes</h2>


<p>In addition to the normal way of accessing class attributes you can also use the <code>[]</code> method to access attributes like you would from an array by inserting the index in the brackets or like you from a hash by inserting the key in the brackets.  Here are some examples:</p>

<figure class='code'><figcaption><span>Accessing Struct Attributes </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">book1</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="c1">#=&gt; “Learn to Program”</span>
</span><span class='line'>
</span><span class='line'><span class="n">book1</span><span class="o">[</span><span class="err">“</span><span class="n">title</span><span class="err">”</span><span class="o">]</span>
</span><span class='line'><span class="c1">#=&gt; “Learn to Program”</span>
</span><span class='line'>
</span><span class='line'><span class="n">book1</span><span class="o">[</span><span class="ss">:title</span><span class="o">]</span>
</span><span class='line'><span class="c1">#=&gt; “Learn to Program”</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see you can access the <code>title</code> attribute by index or by name using a String or Symbol.</p>

<h2>Learn More About Structs</h2>




<ul>
  <li>You can see more Struct methods by checking out the <a href="http://ruby-doc.org/core-1.9.3/Struct.html" target="_blank">Struct Class doc</a>.</li>

  <li>For a more comprehensive explination of Structs read the blog post <a href="http://blog.rubybestpractices.com/posts/rklemme/017-Struct.html" target="_blank">Structs Inside and Out</a></li>

  <li>If you want to make Read-only Structs check out the <a href="https://github.com/janlelis/value_struct" target="_blank">Value Struct Gem</a> and this <a href="http://ruby.janlelis.de/65-value_struct-read-only-structs-in-ruby" target="_blank">blog post</a> about it.</li>
</ul>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.[ ] Method...Huh?]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/02/27/square-brackets-ruby-method/"/>
    <updated>2014-02-27T12:25:28-05:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/02/27/square-brackets-ruby-method</id>
    <content type="html"><![CDATA[<p>I came across the blog post <a href="http://sirupsen.com/what-I-wish-a-ruby-programmer-had-told-me-one-year-ago/" target="_blank">“What I Wish a Ruby Programmer Had Told Me One Year Ago”</a> and started reading through the author Simon’s code for the first iteration of his todo app to figure out what was going on.  One method he used was:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">[]</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@list</span><span class="o">[</span><span class="nb">id</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This had me pretty confused at first. Then when I looked at how he was running the code I saw he was calling this method like you would access an element in an array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">list</span> <span class="o">=</span> <span class="no">TodoList</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&quot;todo.td&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">list</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">done</span> <span class="o">=</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>It turns out in Ruby you can use special characters to name methods including the array lookup syntax, square brackets.  In this way he names the method <code>[ ]</code> and passes it an <code>(id)</code>, which is then passed to the array <code>@list</code> to lookup that element in the <code>@list</code> array.  Essentially he’s creating a lookup on the instance of his class <code>TodoList</code>, so he can use <code>[ ]</code> to lookup specific todo items just like he would if here were accessing them in array, which technically he is&hellip;the @list array.  Pretty Cool!</p>

<p>Check out this Stackoverflow answer for some good examples of how to use the [ ] method, <a href="http://stackoverflow.com/questions/10018900/how-does-defining-square-bracket-method-in-ruby-work" target="_blank"><a href="http://stackoverflow.com/questions/10018900/how-does-defining-square-bracket-method-in-ruby-work">http://stackoverflow.com/questions/10018900/how-does-defining-square-bracket-method-in-ruby-work</a></a></p>

<p>Here is another great Stackoverflow answer about Ruby Method names, <a href="http://stackoverflow.com/questions/10542354/what-are-the-restrictions-for-method-names-in-ruby" target="_blank"><a href="http://stackoverflow.com/questions/10542354/what-are-the-restrictions-for-method-names-in-ruby">http://stackoverflow.com/questions/10542354/what-are-the-restrictions-for-method-names-in-ruby</a></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding a Feed Class &amp; CLI Interface to my Twitter Bot ]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/02/26/adding-a-feed-class-to-my-twitter-bot-and-cli-interface/"/>
    <updated>2014-02-26T06:47:41-05:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/02/26/adding-a-feed-class-to-my-twitter-bot-and-cli-interface</id>
    <content type="html"><![CDATA[<p>After reading the blog post <a href="http://sirupsen.com/what-I-wish-a-ruby-programmer-had-told-me-one-year-ago/" target="_blank">“What I Wish a Ruby Programmer Had Told Me One Year Ago”</a> and reading the code for his ToDo app I realized I should create a Feed class that has <a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete" target="_blank">CRUD</a> operations so I can list, add, edit, and delete my feeds.  It’s probably not the cleanest or most “ruby way&#8221; of doing it (if you have any suggestions please let me know) but it got the job done and I’ll refactor it to make it more rubish and/or turn it into a Sinatra app next.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#class that stores feeds</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Feed</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:file</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">file</span> <span class="o">=</span> <span class="s1">&#39;feeds.txt&#39;</span><span class="p">)</span> <span class="c1"># sets file to save feeds to, sets @feed array, and calls the list method </span>
</span><span class='line'>      <span class="vi">@file</span> <span class="o">=</span> <span class="n">file</span>
</span><span class='line'>      <span class="vi">@feeds</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>      
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span> <span class="c1"># takes a feed from the user and adds it to the file </span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Add feed&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;&gt;&gt;&#39;</span>
</span><span class='line'>      <span class="n">new_feed</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>      <span class="no">File</span><span class="o">.</span><span class="n">open</span> <span class="vi">@file</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>          <span class="n">f</span><span class="o">.</span><span class="n">puts</span> <span class="n">new_feed</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;added the feed </span><span class="si">#{</span><span class="n">new_feed</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_feeds</span> <span class="c1">#gets the feeds from the file and puts them in the @feeds array so they can be used by the .edit and .delete methods</span>
</span><span class='line'>      <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="vi">@file</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>          <span class="vi">@feeds</span> <span class="o">&lt;&lt;</span> <span class="n">f</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">write_feeds</span> <span class="c1">#writes the @feeds array to the file so .edit and .delete can write the @feeds array they&#39;ve changed to the file </span>
</span><span class='line'>      <span class="no">File</span><span class="o">.</span><span class="n">open</span> <span class="vi">@file</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>          <span class="vi">@feeds</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">feed</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">puts</span><span class="p">(</span><span class="n">feed</span><span class="p">)}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">edit</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="c1">#takes a file name from the user and then checks if that exists in the @feeds array. </span>
</span><span class='line'>      <span class="n">get_feeds</span>  <span class="c1">#If it does it gets the id and asks the user what they want to change the name to and then changes that index to the new name.</span>
</span><span class='line'>                 <span class="c1">#From here it calls the write_feeds method and writes the new array to the file </span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@feeds</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>          <span class="n">index</span> <span class="o">=</span> <span class="vi">@feeds</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;What do you want to change </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2"> to?&quot;</span>
</span><span class='line'>          <span class="n">new_feed</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>          <span class="vi">@feeds</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">new_feed</span>
</span><span class='line'>          <span class="n">write_feeds</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;no such feed&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">list</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="c1">#works almost the same as the .edit method but instead of changing the feed name it deletes it</span>
</span><span class='line'>      <span class="n">get_feeds</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@feeds</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>          <span class="n">index</span> <span class="o">=</span> <span class="vi">@feeds</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;Are you sure you want to delete </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">?&quot;</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;Enter &#39;yes&#39; or &#39;no&#39;:&quot;</span>
</span><span class='line'>          <span class="n">answer</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">answer</span> <span class="o">==</span> <span class="s2">&quot;yes&quot;</span>
</span><span class='line'>              <span class="vi">@feeds</span><span class="o">.</span><span class="n">delete_if</span> <span class="p">{</span><span class="o">|</span><span class="n">feed</span><span class="o">|</span> <span class="n">feed</span> <span class="o">==</span> <span class="nb">name</span><span class="p">}</span>
</span><span class='line'>              <span class="n">write_feeds</span>
</span><span class='line'>              <span class="nb">puts</span> <span class="s2">&quot;Feed </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2"> has been deleted.&quot;</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>              <span class="nb">puts</span> <span class="s2">&quot;Ok I won&#39;t delete it then.&quot;</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;Sorry don&#39;t have that file.&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">list</span> <span class="c1">#if the feeds.txt file is empty it asks for feeds, if not it puts the feeds from the file </span>
</span><span class='line'>      <span class="n">read_file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span> <span class="vi">@file</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">read_file</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;the file is empty please add some feeds&quot;</span>
</span><span class='line'>          <span class="n">create</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;here is the list of feeds from file </span><span class="si">#{</span><span class="vi">@file</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="n">read_file</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>After finishing this I decided I wanted to add some sort of command line interface so I could list out, add, edit, and delete the feeds from my terminal. I also added the -tweet command which runs the FeedParser class and begins tweeting out the feeds.  I realize there is an options parser library I could use for this but I wanted to design and build my own.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;feed&#39;</span>
</span><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;feed_parser&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CommandLineInterface</span> <span class="c1">#allows user to interact with feed.rb to list, add, edit, and delete </span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>      <span class="vi">@feeds</span> <span class="o">=</span> <span class="no">Feed</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">take_commands</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">take_commands</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;What do you want to do?  To see list of commands enter -commands&quot;</span>
</span><span class='line'>      <span class="k">until</span> <span class="kp">false</span>
</span><span class='line'>      <span class="n">response</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>      <span class="n">parse_response</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">parse_response</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">response</span> <span class="o">==</span> <span class="s2">&quot;-commands&quot;</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;-list     - list your feeds&quot;</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;-add      - add a new feed&quot;</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;-edit     - edit an existing feed&quot;</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;-delete - delete an existing feed&quot;</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;-tweet  - tweets out the feeds&quot;</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;-quit  - quit this program&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="k">case</span> <span class="n">response</span>
</span><span class='line'>          <span class="k">when</span> <span class="s2">&quot;-list&quot;</span>
</span><span class='line'>              <span class="vi">@feeds</span><span class="o">.</span><span class="n">list</span>
</span><span class='line'>          <span class="k">when</span> <span class="s2">&quot;-add&quot;</span>
</span><span class='line'>              <span class="vi">@feeds</span><span class="o">.</span><span class="n">add</span>
</span><span class='line'>          <span class="k">when</span> <span class="s2">&quot;-edit&quot;</span>
</span><span class='line'>              <span class="nb">puts</span> <span class="s2">&quot;feed name:&quot;</span>
</span><span class='line'>              <span class="nb">name</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>              <span class="vi">@feeds</span><span class="o">.</span><span class="n">edit</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>          <span class="k">when</span> <span class="s2">&quot;-delete&quot;</span>
</span><span class='line'>              <span class="nb">puts</span> <span class="s2">&quot;feed name:&quot;</span>
</span><span class='line'>              <span class="nb">name</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>              <span class="vi">@feeds</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>          <span class="k">when</span> <span class="s2">&quot;-tweet&quot;</span>
</span><span class='line'>              <span class="n">parser</span> <span class="o">=</span> <span class="no">FeedParser</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@feeds</span><span class="o">.</span><span class="n">get_feeds</span><span class="p">)</span>
</span><span class='line'>              <span class="n">parser</span><span class="o">.</span><span class="n">run</span>
</span><span class='line'>              
</span><span class='line'>          <span class="k">when</span> <span class="s2">&quot;-quit&quot;</span>
</span><span class='line'>              <span class="nb">exit</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>              <span class="nb">p</span> <span class="s1">&#39;not a valid command&#39;</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">take_commands</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">cli</span> <span class="o">=</span> <span class="no">CommandLineInterface</span><span class="o">.</span><span class="n">new</span>    
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recoding My RSS Twitter Bot]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/02/19/recoding-my-rss-twitter-bot/"/>
    <updated>2014-02-19T06:03:44-05:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/02/19/recoding-my-rss-twitter-bot</id>
    <content type="html"><![CDATA[<p>My last blog post about my RSS Twitter Bot made realize a lot of flaws with my bot, not only in the code I wrote but the choices I made about what to code.  This led me to re-code the entire bot, but I think the code is much cleaner now.</p>

<!-- more -->


<figure class='code'><figcaption><span>Recoded RSS Twitter Bot </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rss&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;twitter&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;yaml&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">FeedParser</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">*</span><span class="n">feeds</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@feeds</span> <span class="o">=</span> <span class="n">feeds</span>
</span><span class='line'>      <span class="vi">@tweet</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>      <span class="vi">@pub_date</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>      <span class="vi">@tweet_length</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span><span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="vi">@tweet</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">140</span>
</span><span class='line'>              <span class="k">next</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>              <span class="n">tweeter</span><span class="p">(</span><span class="vi">@tweet</span><span class="p">)</span>
</span><span class='line'>              <span class="nb">puts</span> <span class="s2">&quot;tweeted&quot;</span>
</span><span class='line'>
</span><span class='line'>              <span class="nb">sleep</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">config</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="s1">&#39;config.yml&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@client</span> <span class="o">=</span> <span class="ss">Twitter</span><span class="p">:</span><span class="ss">:REST</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span><span class="p">({</span>
</span><span class='line'>              <span class="n">consumer_key</span><span class="p">:</span> <span class="n">config</span><span class="o">[</span><span class="s1">&#39;consumer_key&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>              <span class="n">consumer_secret</span><span class="p">:</span> <span class="n">config</span><span class="o">[</span><span class="s1">&#39;consumer_secret&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>              <span class="n">access_token</span><span class="p">:</span> <span class="n">config</span><span class="o">[</span><span class="s1">&#39;access_token&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>              <span class="n">access_token_secret</span><span class="p">:</span> <span class="n">config</span><span class="o">[</span><span class="s1">&#39;access_token_secret&#39;</span><span class="o">]</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>      
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>      <span class="n">feed_sorter</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># method that sorts feeds</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">feed_sorter</span>
</span><span class='line'>      <span class="vi">@feeds</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">url</span><span class="o">|</span>
</span><span class='line'>          <span class="nb">open</span><span class="p">(</span><span class="n">url</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">rss</span><span class="o">|</span>
</span><span class='line'>              <span class="n">feed</span> <span class="o">=</span> <span class="ss">RSS</span><span class="p">:</span><span class="ss">:Parser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">rss</span><span class="p">)</span>
</span><span class='line'>          
</span><span class='line'>              <span class="k">case</span>
</span><span class='line'>              <span class="k">when</span> <span class="n">feed</span><span class="o">.</span><span class="n">feed_type</span> <span class="o">==</span> <span class="s2">&quot;rss&quot;</span>
</span><span class='line'>                  <span class="n">rss_parser</span><span class="p">(</span><span class="n">feed</span><span class="p">)</span>
</span><span class='line'>              <span class="k">when</span> <span class="n">feed</span><span class="o">.</span><span class="n">feed_type</span> <span class="o">==</span> <span class="s2">&quot;atom&quot;</span>
</span><span class='line'>                  <span class="n">atom_parser</span><span class="p">(</span><span class="n">feed</span><span class="p">)</span>
</span><span class='line'>              <span class="k">end</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">rss_parser</span><span class="p">(</span><span class="n">rss</span><span class="p">)</span>
</span><span class='line'>      <span class="n">rss</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>          <span class="n">title</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="n">title</span>
</span><span class='line'>          <span class="n">link</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="n">link</span>
</span><span class='line'>          <span class="vi">@tweet</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">title</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">link</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>          <span class="vi">@tweet_length</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>          
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">atom_parser</span><span class="p">(</span><span class="n">atom</span><span class="p">)</span>
</span><span class='line'>      <span class="n">atom</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>          <span class="n">title</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">content</span>
</span><span class='line'>          <span class="n">link</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="n">link</span><span class="o">.</span><span class="n">href</span>
</span><span class='line'>          <span class="vi">@tweet</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">title</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">link</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>          <span class="vi">@tweet_length</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tweeter</span><span class="p">(</span><span class="n">tweet</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@client</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">tweet</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">parser</span> <span class="o">=</span> <span class="no">FeedParser</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;https://gdata.youtube.com/feeds/api/users/goaztecscom/uploads&#39;</span><span class="p">,</span> <span class="s1">&#39;http://www.utsandiego.com/rss/headlines/sports/sdsu-aztecs/&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">parser</span><span class="o">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>




<h2>I Switched to the RSS Module</h2>


<p>During and after writing the first post about my Twitter Bot I did more research into the Ruby RSS Module and found that it has <code>.feed_type</code> method that allows you to easily sort the types of feeds so you can use the correct methods to parse them.  Sorting the feeds this way is infinitely better than the weird/incorrect way I was doing it before albeit it was good practice with hashes.</p>

<figure class='code'><figcaption><span>Sorting Feeds with the RSS Module</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@feeds</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">url</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">open</span><span class="p">(</span><span class="n">url</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">rss</span><span class="o">|</span>
</span><span class='line'>      <span class="n">feed</span> <span class="o">=</span> <span class="ss">RSS</span><span class="p">:</span><span class="ss">:Parser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">rss</span><span class="p">)</span>
</span><span class='line'>          
</span><span class='line'>      <span class="k">case</span>
</span><span class='line'>      <span class="k">when</span> <span class="n">feed</span><span class="o">.</span><span class="n">feed_type</span> <span class="o">==</span> <span class="s2">&quot;rss&quot;</span>
</span><span class='line'>          <span class="n">rss_parser</span><span class="p">(</span><span class="n">feed</span><span class="p">)</span>
</span><span class='line'>      <span class="k">when</span> <span class="n">feed</span><span class="o">.</span><span class="n">feed_type</span> <span class="o">==</span> <span class="s2">&quot;atom&quot;</span>
</span><span class='line'>          <span class="n">atom_parser</span><span class="p">(</span><span class="n">feed</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>I Finally Used a Proc in my Code</h2>


<p>I remember learning about Procs and Lamdas on Codecademy and thinking they were pretty cool&hellip;ok really cool.  Since that time I haven’t used them in my code, accept when trying to code FizzBuzz in as many different ways as possible, which sort of makes sense since everything I’m doing is super simple, but still&hellip;I want to use a some damn Procs.</p>

<p>Finally, I found a reason.  When re-coding my bot I decided there was no reason to try and adjust the length of the feed titles because eventually my bot will hopefully use a URL shortener, meaning 99.99% of the time the titles will never make the tweet go over 140 characters.  Still I needed an easy way to keep <code>@tweets</code> that are over 140 characters from being sent to the <code>.tweeter</code> method and causing an error.  Obviously, I could stick an if/else statement in a method and call it from the &lt;.rss> and &lt;.atom> methods, but using a Proc sounded way more fun :).</p>

<figure class='code'><figcaption><span>Using a Proc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@tweet_length</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span><span class="p">{</span>
</span><span class='line'><span class="k">if</span> <span class="vi">@tweet</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">140</span>
</span><span class='line'>      <span class="k">next</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">tweeter</span><span class="p">(</span><span class="vi">@tweet</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;tweeted&quot;</span>
</span><span class='line'>      <span class="nb">sleep</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<h2>Next Steps</h2>


<ol>
  <li>Check for new articles, videos, etc. in the feeds and only tweet the new ones</li>
  <li>Learn Sinatra and turn this into a Sinatra App</li>
  <li>Add a url shortner like bit.ly or roll my own</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Notes - Working with Files]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/02/17/ruby-notes-working-with-files/"/>
    <updated>2014-02-17T16:56:05-05:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/02/17/ruby-notes-working-with-files</id>
    <content type="html"><![CDATA[<p>My next “Ruby Notes” post was going to be on arrays but in my last couple of mini projects, <a href="https://github.com/kylefdoherty/ruby-quiz-solutions/tree/master/text_munger_76" target="_blank">Text Munger problem on RubyQuiz</a>, and building an <a href="https://github.com/kylefdoherty/image-editor" target="_blank">image editor command line app</a>, I had to work a lot with files and directories and realized I didn’t have a great handle on them.  To remedy this I did what I always do, a bunch of reading, practice problems, and put it all down in my notebook.  There still is a lot for me to learn but I think this lays a good foundation for understanding and working with files in Ruby.</p>

<!-- more -->


<h2>IO Class</h2>


<p>The IO class is the parent class for the File class and thus is where it gets a ton of its methods such as readlines and readline.  IO stands for input/output, specifically input/output streams which are sequences of data that allow you to do things like play sound on your speakers and print output to a screen.  The IO class allows you to initialize streams and do things with them.</p>

<h2>Standard Output, Input, and Error</h2>


<p>STDOUT, STDIN, and STDERR are ruby constants that are IO objects pointing to your programs output, input, and error streams.  You can access these streams through the terminal without opening any files.</p>

<p>When you do something like call puts, output is sent to the IO object that STDOUT points to.  Conversely when you call get, input is captured by the IO object that STDIN points to.</p>

<p><strong>Further Reading:</strong> <a href="https://rubymonk.com/learning/books/1-ruby-primer/chapters/42-introduction-to-i-o/lessons/89-streams" target="_blank"><a href="https://rubymonk.com/learning/books/1-ruby-primer/chapters/42-introduction-to-i-o/lessons/89-streams">https://rubymonk.com/learning/books/1-ruby-primer/chapters/42-introduction-to-i-o/lessons/89-streams</a></a></p>

<h2>File Class</h2>


<p>According to the <a href="http://ruby-doc.org/core-1.9.3/File.html" target="_blank">ruby doc</a>, a File is an abstraction of any file object accessible by the program and is closely associated with the class IO (it’s a subclass of IO).</p>

<p>You use the File class to create files, read them, and write to them.  There are various modes that can be given to the File class telling it what its behaviour is i.e. can read it, can write to it, can do both, etc.  These modes are inherited from the IO class and are listed below.</p>

<p></style></p>

<h3>Modes</h3>


<table style="width:700px">
    <tr>
      <th>Mode</th>
      <th>Meaning</th>      
    </tr>
    <tr>
      <td>&#8220;r&#8221;</td>
      <td>Read-only, starts at beginning of file  (default mode).</td>      
     </tr>
    <tr>
      <td>&#8220;r+&#8221;</td>
      <td>Read-write, starts at beginning of file.</td>     
    </tr>
    <tr>
      <td>&#8220;w&#8221;</td>
      <td>Write-only, truncates existing file to zero length or creates a new file for writing.</td>        
    </tr>
    <tr>
      <td>&#8220;w+&#8221;</td>
      <td>Read-write, truncates existing file to zero length or creates a new file for reading and writing.</td>        
    </tr>
    <tr>
      <td>&#8220;a&#8221;</td>
      <td>Write-only, starts at end of file if file exists, otherwise creates a new file for writing.</td>      
    </tr>
    <tr>
      <td>&#8220;a+&#8221;</td>
      <td>Read-write, starts at end of file if file exists, otherwise creates a new file for reading and writing.</td>      
    </tr>
    <tr>
      <td>&#8220;b&#8221;</td>
      <td>Binary file mode (may appear with any of the key letters listed above). Suppresses EOL <-> CRLF conversion on Windows. And sets external encoding to ASCII-8BIT unless explicitly specified.</td>     
    </tr>
    <tr>
      <td>&#8220;t&#8221;</td>
      <td>Text file mode (may appear with any of the key letters listed above except &#8220;b&#8221;).</td>     
    </tr>
</table>


<br>




<h2>Writing to a File</h2>


<figure class='code'><figcaption><span>Writing to a File </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="err">“</span><span class="n">text</span><span class="o">.</span><span class="n">txt</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">w</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">file</span><span class="o">.</span><span class="n">puts</span> <span class="err">“</span><span class="no">Hello</span> <span class="n">from</span> <span class="c1">#{$0}”</span>
</span><span class='line'><span class="n">file</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; writes “Hello from io.rb” to the file text.txt</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the first line I’m calling the <code>.open</code> method on the File class and passing it the file text.txt and the mode I want the file to use, “w”.  Next I’m using the <code>.puts</code> method to write to the file and passing it the text I want it to write to the file.  Note, that If we didn’t have a file text.txt in our directory, this script would have created it.</p>

<h3>Using Block Notation</h3>


<figure class='code'><figcaption><span>Writing to a File with Block Notation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="err">“</span><span class="n">text</span><span class="o">.</span><span class="n">txt</span><span class="err">”</span><span class="p">,</span><span class="err">”</span><span class="n">w</span><span class="err">”</span><span class="p">){</span><span class="o">|</span><span class="n">file</span><span class="o">|</span> <span class="n">file</span><span class="o">.</span><span class="n">puts</span><span class="err">”</span><span class="no">Hola</span> <span class="n">from</span> <span class="vg">$0</span><span class="err">”</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that when passing a block to File you don’t have to close it because when the block is exited it closes the File for you.</p>

<h2>Reading a File</h2>


<figure class='code'><figcaption><span>Reading from a File</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="err">“</span><span class="n">lib</span><span class="o">/</span><span class="no">I_have_a_dream</span><span class="o">.</span><span class="n">txt</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">contents</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">contents</span>
</span><span class='line'><span class="n">file</span><span class="o">.</span><span class="n">close</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is pretty simple.  We’re opening the file we want to read with the <code>.open</code> method and storing it in the file variable.  Then we call the <code>.read</code> method on file and store it in contents and then puts the contents.
<code>.read</code> starts reading from the place the last <code>.read</code> operation stopped. Here we’ve read the entire file and thus if below <code>puts contents</code> we tried to read the file again there would be nothing to read because we&rsquo;re at the end of the file.</p>

<h3>Reading a File Block Notation</h3>


<figure class='code'><figcaption><span>Reading from a File Block Notation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">contents</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="err">“</span><span class="n">lib</span><span class="o">/</span><span class="no">I_have_a_dream</span><span class="o">.</span><span class="n">txt</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">r</span><span class="err">”</span><span class="p">){</span><span class="o">|</span><span class="n">file</span><span class="o">|</span> <span class="n">file</span><span class="o">.</span><span class="n">read</span><span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">contents</span>
</span></code></pre></td></tr></table></div></figure>




<h2>Closing Files</h2>


<p>If you open a file make sure you close it, unless you’re passing File a block and then the block will close the file when it ends.</p>

<p>The reason you need to close files is it forces a “flush”, which means it pushes the data-to-be-written to where you want it to be.  This frees up memory for the rest of your program and ensures the file is available for other processes to access.</p>

<p><strong>Further Reading:</strong> <a href="http://ruby.bastardsbook.com/chapters/io/" target="_blank"><a href="http://ruby.bastardsbook.com/chapters/io/">http://ruby.bastardsbook.com/chapters/io/</a></a></p>

<h2>More File Methods</h2>


<p>We’ve already seen some file methods like .open and .close but here are some more useful ones. Checkout the ruby doc for File and IO for the rest of them.</p>

<h3>.readlines & .readline</h3>


<p>These two methods can be very handy when you want to read one line at a time.  This would be useful for instance if you are reading a comma delimited file.</p>

<h3>.readlines</h3>


<p> &ndash; takes in all the content of the file and stores each line as an element of an array.  From here you can iterate over each line using each.</p>

<figure class='code'><figcaption><span>Using Readlines </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">read_file</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">line</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>.readline</h3>


<p> &ndash; is a bit different in it only reads one line at a time and thus you need to keep advancing it forward in the file, which can be done with a <code>while</code> or <code>until</code> method.</p>

<figure class='code'><figcaption><span>Using Readline </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;lib/blood_sweat_tears.txt&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">until</span> <span class="n">file</span><span class="o">.</span><span class="n">eof?</span>
</span><span class='line'>   <span class="n">line</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="n">readline</span>
</span><span class='line'>   <span class="nb">puts</span> <span class="n">line</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">file</span><span class="o">.</span><span class="n">close</span>
</span></code></pre></td></tr></table></div></figure>


<p>The reason you would want to <code>.readline</code> vs <code>.readlines</code> is because <code>.readlines</code> loads the entire contents of the file into memory.  For a small script working with small files this isn’t a problem but if you are using large files and/or have multiple users this is bad.</p>

<h3>.exists?</h3>


<p> &ndash; checks for the existence of the file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="err">“</span><span class="n">file_name</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">#do something </span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<h3>.absolute_path</h3>


<p> &ndash; gets the absolute path for the.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="no">File</span><span class="o">.</span><span class="n">absolute_path</span><span class="p">(</span><span class="s2">&quot;lib/blood_sweat_tears.txt&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; “/Users/kyledoherty/Dropbox/Ruby/learn_to_program/working_w_files/lib/blood_sweat_tears.txt”</span>
</span></code></pre></td></tr></table></div></figure>




<h3>.basename</h3>


<p> &ndash; gives you just the filename.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="no">File</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="err">“</span><span class="o">/</span><span class="no">Users</span><span class="o">/</span><span class="n">kyledoherty</span><span class="o">/</span><span class="no">Dropbox</span><span class="o">/</span><span class="no">Ruby</span><span class="o">/</span><span class="n">learn_to_program</span><span class="o">/</span><span class="n">working_w_files</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">blood_sweat_tears</span><span class="o">.</span><span class="n">txt</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; “blood_sweat_tears.txt’</span>
</span></code></pre></td></tr></table></div></figure>




<h3>.directory?</h3>


<p> &ndash; returns true if the string passed to it is a directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">filename</span><span class="o">|</span>
</span><span class='line'>  <span class="k">next</span> <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">directory?</span> <span class="n">filename</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<h2>Dir Class</h2>


<p>The Directory class allows you to work with driectories as you’d expect.  Most of the methods you can use on the directory class are the same as the commands you use in the console.</p>

<h2>Some Dir Methods</h2>




<h3>.pwd</h3>


<p> &ndash; tells you what directory you’re in.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span>
</span><span class='line'><span class="c1">#=&gt; &quot;/Users/kyledoherty/Dropbox/Ruby/image_edit&quot;  </span>
</span></code></pre></td></tr></table></div></figure>




<h3>.chdir</h3>


<p> &ndash;  allows you to change to a new directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="err">“</span><span class="s2">&quot;/Users/kyledoherty/Dropbox/Ruby/rubyquiz”</span>
</span><span class='line'><span class="s2">#=&gt; 0</span>
</span></code></pre></td></tr></table></div></figure>




<h3>.mkdir</h3>


<p> &ndash; makes a new directory named the string it is passed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="err">“</span><span class="n">stuff</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; 0</span>
</span></code></pre></td></tr></table></div></figure>




<h3>.rmdir</h3>


<p> &ndash; removes an empty directory but throws an error if it contains files.  To remove a directory with files you must use the FileUtils module.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">rmdir</span><span class="p">(</span><span class="err">“</span><span class="n">stuff</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; 0</span>
</span></code></pre></td></tr></table></div></figure>




<h2>Accessing Directory Content</h2>


<p>There are two ways to grab content from directories, using .entries and .glob.</p>

<h3>.entries</h3>


<p> &ndash;  returns an array with every single entry inside the diretory including “.” and hidden files.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">entries</span><span class="p">(</span><span class="err">“</span><span class="o">.</span><span class="n">.</span><span class="o">/</span><span class="n">rubyquiz</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;.&quot;, &quot;..&quot;, &quot;.DS_Store&quot;, &quot;.git&quot;, &quot;README&quot;, &quot;text_munger_76&quot;] </span>
</span></code></pre></td></tr></table></div></figure>


<h3>.glob</h3>


<p> &ndash; can be passed a directory name or pattern such as <code>*.txt</code> and returns an array of just the visible files</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">entries</span><span class="p">(</span><span class="err">“</span><span class="o">*</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;README&quot;, &quot;text_munger_76&quot;] </span>
</span></code></pre></td></tr></table></div></figure>


<p>Gives us the files in the current directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">entries</span><span class="p">(</span><span class="err">“</span><span class="o">**/*.</span><span class="n">txt</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;text_munger_76/lib/blood_sweat_tears.txt&quot;, &quot;text_munger_76/lib/gettysburg_address.txt&quot;, &quot;text_munger_76/lib/I_have_a_dream.txt&quot;, &quot;text_munger_76/lib/pearl_harbor_address.txt&quot;, &quot;text_munger_76/lib/strength_and_decency.txt&quot;] </span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we use <code><em>*/</em>.txt</code> to search the current directory and all it’s sub directories for any .txt files using a recursive search and passing it the pattern .txt.</p>

<h2>FileUtils Module</h2>


<p>I’m not going to go into FileUtils too much but it allows more control over files and mimics a lot of the command line commands and flags you can use such as <code>rm -rf</code> for removing directories that contain files.</p>

<h2>Some Methods</h2>




<h3>.mkdir</h3>


<p> &ndash; makes a directory</p>

<h3>.touch</h3>


<p> &ndash; makes a file</p>

<h3>.rm_rf</h3>


<p> &ndash; removes a directory whether it contains other files and directories or not</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="err">“</span><span class="n">file_name</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">rm_rf</span><span class="p">(</span><span class="err">“</span><span class="n">file_name</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Note: you need to require FileUtils in your files with <code>require ‘fileutils’</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building an RSS Twitter Bot]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/02/17/building-an-rss-twitter-bot/"/>
    <updated>2014-02-17T07:07:55-05:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/02/17/building-an-rss-twitter-bot</id>
    <content type="html"><![CDATA[<p>Last night after finishing my Ruby Notes on the File class I decided I wanted to try building an RSS Twitter bot.  I’d gotten the idea a week or so ago while reading some articles about my Alma Mater’s Top 10 Basketball team, the SDSU Aztecs in case you’re wondering, and thinking it would be cool to create an app that I could plug RSS feeds into and it’d tweet out the updates to the RSS feeds.  This way I’d always be up to date with sports news about my Aztecs and it’d be a good simple project for me to tackle.</p>

<!-- more -->


<p></p>

<p><img class="center" src="http://kylefdoherty.github.io/images/Twitter_Application_Management.png" title="SDSUSports Twitter App" alt="An image my Twitter bot app."></p>

<h2>Reading RSS Feeds</h2>


<p>So I looked into how to read RSS feeds and found the RSS module and the Simple RSS gem.  I played around with both and decided to use SimpleRSS.  To keep things simple my goal was to plug in two feeds, the <a href="http://www.utsandiego.com/news/sports/sdsu-aztecs/" target="_blank">UT San Diego’s SDSU Sports section</a> and the <a href="www.youtube.com/user/goaztecscom‎" target="_blank">SDSU Athletics Youtube Channel</a> and tweet out the feeds.</p>

<p>Here is what the Twitter Account looked like after I got this to work.</p>

<p><img class="center" src="http://kylefdoherty.github.io/images/Cut_Down_Nets___SDSUsports__on_Twitter.png" title="SDSUSports Twitter Account" alt="An image of the twitter account I created for my twitter bot to post to."></p>

<h2>Getting Off Track</h2>


<p>It didn’t take long to get the basics of taking in a feed and parsing it to remove just the title and the link but after that I got a bit off track.  I spent a bunch of time on how to remove the date that was included at the end of every GoAztecs.com Youtube video title because I decided I didn’t want this in the tweets.  Here’s an example title so you know what I’m talking about, “SDSU MEN&rsquo;S HOOPS: STEVE FISHER POSTGAME vs. AIR FORCE &ndash; 2/15/14.”  This turned out to be good practice with strings and arrays, but in hindsight this was a dumb thing to do since this is for one specific feed and thus can’t be reused.  What I should have been focusing on was sorting feeds as either an RSS feed or Atom feed, because that dictates what methods you use to parse the feed.</p>

<h2>Sort Them Feeds</h2>


<p>Once I finished removing the dates from the video titles I went about sorting whether the feeds were RSS or Atom.  I knew that having “feed” and “rss” in the URL was probably not the standard for telling if a feed was RSS or Atom but I just wanted to get this working for these two feeds and improve my code later.</p>

<figure class='code'><figcaption><span>Sorting Feeds</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">feed_sorter</span>
</span><span class='line'><span class="n">feed_num</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@feeds</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">feed</span><span class="o">|</span>
</span><span class='line'>      <span class="n">feed_num</span> <span class="o">+=</span><span class="mi">1</span>
</span><span class='line'>      <span class="k">case</span>
</span><span class='line'>      <span class="k">when</span> <span class="n">feed</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;feed&#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="vi">@sorted_feeds</span><span class="o">[</span><span class="n">feed_num</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">feed</span><span class="p">,</span> <span class="s1">&#39;atom&#39;</span><span class="o">]</span>
</span><span class='line'>      <span class="k">when</span> <span class="n">feed</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;rss&#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="vi">@sorted_feeds</span><span class="o">[</span><span class="n">feed_num</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">feed</span><span class="p">,</span> <span class="s1">&#39;rss&#39;</span><span class="o">]</span>
</span><span class='line'>      <span class="k">else</span> <span class="n">invalid</span> <span class="n">feed</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see that I’m checking if “RSS” or “Atom” is in the URL and then sticking then storing them in an array inside a hash.  Again I knew I’d have to change this down the road, especially if I start using a database for persistence but this gets the job done for my two feeds.</p>

<h2>Putting it All Together</h2>


<p>From here all I wanted to clean up my code and put it in a class.  So I created a RssParser class, which probably should be renamed to FeedParser, and created the methods initialize, run, feed_sorter, feed_parser, and send_tweet. Then I added the Twitter Gem and my keys and tokens and boom it worked.</p>

<figure class='code'><figcaption><span>RssParser </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;simple-rss&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;twitter&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">RssParser</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">*</span><span class="n">feeds</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@feeds</span> <span class="o">=</span> <span class="n">feeds</span>
</span><span class='line'>      <span class="vi">@sorted_feeds</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>      <span class="vi">@tweet</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="vi">@client</span> <span class="o">=</span> <span class="ss">Twitter</span><span class="p">:</span><span class="ss">:REST</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>        <span class="n">config</span><span class="o">.</span><span class="n">consumer_key</span>        <span class="o">=</span> <span class="s2">&quot;Consumer_Key&quot;</span>
</span><span class='line'>        <span class="n">config</span><span class="o">.</span><span class="n">consumer_secret</span>     <span class="o">=</span> <span class="s2">&quot;Consumer_Secret&quot;</span>
</span><span class='line'>        <span class="n">config</span><span class="o">.</span><span class="n">access_token</span>        <span class="o">=</span> <span class="s2">&quot;Access_Token&quot;</span>
</span><span class='line'>        <span class="n">config</span><span class="o">.</span><span class="n">access_token_secret</span> <span class="o">=</span> <span class="s2">&quot;Secret_Token&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>      
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>      <span class="n">feed_sorter</span>
</span><span class='line'>      <span class="n">feed_parser</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#method to sort if feeds are atom or rss feed</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">feed_sorter</span>
</span><span class='line'>      <span class="n">feed_num</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@feeds</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">feed</span><span class="o">|</span>
</span><span class='line'>          <span class="n">feed_num</span> <span class="o">+=</span><span class="mi">1</span>
</span><span class='line'>          <span class="k">case</span>
</span><span class='line'>          <span class="k">when</span> <span class="n">feed</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;feed&#39;</span><span class="p">)</span>
</span><span class='line'>              <span class="vi">@sorted_feeds</span><span class="o">[</span><span class="n">feed_num</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">feed</span><span class="p">,</span> <span class="s1">&#39;atom&#39;</span><span class="o">]</span>
</span><span class='line'>          <span class="k">when</span> <span class="n">feed</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;rss&#39;</span><span class="p">)</span>
</span><span class='line'>              <span class="vi">@sorted_feeds</span><span class="o">[</span><span class="n">feed_num</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">feed</span><span class="p">,</span> <span class="s1">&#39;rss&#39;</span><span class="o">]</span>
</span><span class='line'>          <span class="k">else</span> <span class="n">invalid</span> <span class="n">feed</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#method to parse feed to retrieve the title and link, and to clean up youtube titles for the goaztecscom yoututbe titles </span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">feed_parser</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@sorted_feeds</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">case</span>
</span><span class='line'>          <span class="k">when</span> <span class="n">v</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;rss&quot;</span>
</span><span class='line'>              <span class="n">rss</span> <span class="o">=</span> <span class="no">SimpleRSS</span><span class="o">.</span><span class="n">parse</span> <span class="nb">open</span><span class="p">(</span><span class="n">v</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>              <span class="n">rss</span><span class="o">.</span><span class="n">channel</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">story</span><span class="o">|</span>
</span><span class='line'>                  <span class="vi">@tweet</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">story</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">story</span><span class="o">.</span><span class="n">link</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>                  <span class="n">send_tweet</span>
</span><span class='line'>              <span class="nb">sleep</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span>
</span><span class='line'>              <span class="k">end</span>
</span><span class='line'>          <span class="k">when</span> <span class="n">v</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;atom&quot;</span>
</span><span class='line'>              <span class="n">rss</span> <span class="o">=</span> <span class="no">SimpleRSS</span><span class="o">.</span><span class="n">parse</span> <span class="nb">open</span><span class="p">(</span><span class="n">v</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>              <span class="n">rss</span><span class="o">.</span><span class="n">entries</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">vid</span><span class="o">|</span>
</span><span class='line'>                  <span class="n">title</span> <span class="o">=</span> <span class="n">vid</span><span class="o">.</span><span class="n">media_title</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">)</span>
</span><span class='line'>                  <span class="n">link</span> <span class="o">=</span> <span class="n">vid</span><span class="o">.</span><span class="n">link</span>
</span><span class='line'>
</span><span class='line'>                  <span class="n">title</span><span class="o">.</span><span class="n">delete_at</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                  <span class="k">if</span> <span class="n">title</span><span class="o">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">2</span>
</span><span class='line'>                      <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">title</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">strip</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">title</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">strip</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>                      <span class="vi">@tweet</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">link</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>                      <span class="n">send_tweet</span>
</span><span class='line'>                      
</span><span class='line'>                  <span class="k">else</span>
</span><span class='line'>                      <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">title</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">strip</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>                      <span class="vi">@tweet</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">link</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>                      <span class="n">send_tweet</span>
</span><span class='line'>                  <span class="k">end</span>
</span><span class='line'>                  <span class="nb">sleep</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>              <span class="k">end</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">send_tweet</span>
</span><span class='line'>      <span class="vi">@client</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="vi">@tweet</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Sent tweet: </span><span class="si">#{</span><span class="vi">@tweet</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">parser</span> <span class="o">=</span> <span class="no">RssParser</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;http://gdata.youtube.com/feeds/api/users/goaztecscom/uploads&#39;</span><span class="p">,</span> <span class="s1">&#39;http://www.utsandiego.com/rss/headlines/sports/sdsu-aztecs/&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">parser</span><span class="o">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Next Steps</h2>


<p>As mentioned there are some flaws with my code so I need to begin refactoring what I’ve got so far.  Below are my to-dos in order to improve this code so it will work with multiple feeds.</p>

<ol>
    <li>This morning when I tried to rerun the code for some reason it threw an error that the youtube feed is a poorly formatted feed, so that will be the first thing to figure out.</li>
    <li>Store twitter keys in a yaml file and gitignore</li>
    <li>Figure out a better, more standard way of sorting the feeds</li>
    <li>Remove the case statement that changes the GoAztecs youtube titles</li> 
    <li>Add a check for whether or not the tweets are 140 chars.  If not reduce the title by n - 143 and append &#8216;&#8230;&#8217; to the truncated title and then tweet the title + the link</li>
    <li>Add a database with CRUD operations so I can store more feeds</li>
</ol>




<h2>Down the Road</h2>


<p>Here are some things I&rsquo;d like to do eventually with this little project.</p>

<ol>
    <li>Turn it into a sinatra app (good way to learn Sinatra)</li>
    <li>Add a URL shortener or roll my own</li> 
    <li>Make it so a user can sign in and create their own RSS Twitter bot by providing their API keys</li>
</ol>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Notes - Control Flow]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/02/07/ruby-notes-flow-control/"/>
    <updated>2014-02-07T04:52:33-05:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/02/07/ruby-notes-flow-control</id>
    <content type="html"><![CDATA[<p>I’m 4 weeks into my 25 hours a week of Ruby self-study (I work part time right now otherwise it’d be 40+ hours) and just completed
<a href="http://www.codecademy.com/tracks/ruby" target="_blank">Codecademy’s Ruby track.</a>  Finishing was great but I felt I&rsquo;d  only scratched the surface of Ruby and programming in general.  To supplement my minimal Ruby knowledge I decided to begin additional research and create study notes and do practice problems for each topic covered by Codecadmny, such as control flow, arrays, blocks, etc.  This has already proven a success as I’ve seen a marked difference in my confidence and coding ability after completing notes for Control Flow and Arrays.</p>

<!-- more -->


<p>Now I’ve decided to turn my notes and practice problems into blog posts because:</p>

<ol> 
  <li>Hopefully it will be helpful to other people learning Ruby</li>
  <li>It forces me to read through my notes and practice problems again</li>
  <li>It requires rewriting my notes in way that others can understand thus further driving the concepts home for me</li>
  <li>Hopefully I’ll get feedback on my notes and practice problems (hint hint)</li>
</ol>




<h2>Control Flow</h2>


<p>Control flow allows you to control how your ruby script executes based on conditions.  For example, <code>if</code> condition A is met then do B OR <code>unless</code> B happens do A.</p>

<h2>If Statement</h2>


<p>An if statement tells the program what to do if a condition is met. That is, if the conditional that comes after <code>if</code> is true then execute the following code. If it evaluates to false, it doesn’t execute.</p>

<figure class='code'><figcaption><span>Example 1 - If Statements</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">money</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">money</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="no">You</span> <span class="n">have</span> <span class="n">money</span><span class="o">.</span><span class="err">”</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This if statement is saying if the variable money is true, puts the message “You have money.”  In this case if money were set to false, nothing will puts to the screen.</p>

<figure class='code'><figcaption><span>Example 2 - If Statements </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="mi">2</span> <span class="o">&lt;</span> <span class="mi">3</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="mi">2</span> <span class="n">is</span> <span class="n">less</span> <span class="n">than</span> <span class="mi">3</span><span class="err">”</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since 2 is less than 3 this if statement evaluates to true and thus puts’ “2 is less than 3”.  If we had typed <code>if 2 > 3</code>, puts would not have been executed and ‘nil’ would have been returned because the if statement would have evaluated to false.</p>

<h2>If/Else Statement</h2>


<p>Adding an else into the if statement essentially creates a default i.e. in the event whatever comes after <code>if</code> is false then do this.</p>

<figure class='code'><figcaption><span>Example - If/Else Statement</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">password</span> <span class="o">=</span> <span class="mi">12345678</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span>  <span class="n">password</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;=</span> <span class="mi">8</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="n">your</span> <span class="n">password</span> <span class="n">is</span> <span class="n">long</span> <span class="n">enough</span><span class="err">”</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="n">your</span> <span class="n">password</span> <span class="n">is</span> <span class="n">too</span> <span class="n">short</span><span class="err">”</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<h2>If/Elsif/Else</h2>


<p>Using an elsif allows for multiple conditions to be added to the if statement.  In this way we can essentially add multiple if statements to check for many different possible conditions.</p>

<figure class='code'><figcaption><span>Example - If/Elsif/Else Statement </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">city</span> <span class="o">=</span> <span class="err">“</span><span class="no">San</span> <span class="no">Francisco</span><span class="err">”</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">city</span> <span class="o">==</span> <span class="err">“</span><span class="no">New</span> <span class="no">York</span><span class="err">”</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="no">Jets</span> <span class="o">&amp;</span> <span class="no">Giants</span><span class="err">”</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">city</span> <span class="o">==</span> <span class="err">“</span><span class="no">Denver</span><span class="err">”</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="no">Broncos</span><span class="err">”</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">city</span> <span class="o">==</span> <span class="err">“</span><span class="no">San</span> <span class="no">Francisco</span><span class="err">”</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="mi">49</span><span class="n">ers</span><span class="err">”</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="no">Hmm</span> <span class="n">we</span> <span class="n">don</span><span class="err">’</span><span class="n">t</span> <span class="n">know</span> <span class="n">what</span> <span class="no">NFL</span> <span class="n">team</span> <span class="n">that</span> <span class="n">city</span> <span class="n">has</span><span class="o">.</span><span class="err">”</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the variable <code>city</code> is set to any of the cities in our If/Else statement, the program will puts what NFL team that city has.  If <code>city</code> is not set to one of those cities then the program puts the default message, &ldquo;Hmm we don’t know what NFL team that city has.”</p>

<h2>Unless</h2>


<p>Unless is the opposite of an if statement.  An if statement only executes if the conditional is true, conversely unless only executes if the conditional is false.  It’s good practice to use unless instead of using <code>if !=</code> (if not equal to) since <code>if !=</code> can be a bit confusing.</p>

<p>The following if statement can be replaced with an unless statement.</p>

<figure class='code'><figcaption><span>Example of Bad If Statement</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Give us a message.&quot;</span>
</span><span class='line'><span class="n">message</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">message</span> <span class="o">!=</span> <span class="err">“”</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="c1">#{message}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>By using unless this piece of code becomes much more readable.</p>

<figure class='code'><figcaption><span>Example of When to Use Unless</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Give us a message.&quot;</span>
</span><span class='line'><span class="n">message</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="k">unless</span> <span class="n">message</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another good use case for Unless is to use them in a single line like so:</p>

<figure class='code'><figcaption><span>Example 2 - When to Use Unless </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">milk</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="err">“</span><span class="no">We</span><span class="err">’</span><span class="n">re</span> <span class="n">out</span> <span class="n">of</span> <span class="n">milk</span><span class="o">.</span><span class="err">”</span> <span class="k">unless</span> <span class="n">milk</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; We’re out of milk</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we’re saying only puts we’re out of milk if the milk variable is set to false.  Since in this case milk is set to false then the message would be shown to the screen.</p>

<p>One more example:</p>

<figure class='code'><figcaption><span>Example 3 - When to Use Unless</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">unless</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here <code>i</code> is being increased by 1 unless it is more than 10.</p>

<h3>Unless Best Practices</h3>


<p>There are some best practices you should follow when using unless to ensure you don’t confuse people or yourself.  These aren’t universal, especially considering the Codecademy section on control flow doesn’t follow all of them, but after doing some research I’ve found these best practices given several places such as <a href="https://www.codeschool.com/courses/ruby-bits" target="_blank">Code School’s Ruby Code Bits course</a> and a blog post on the 37Signals blog called <a href="http://signalvnoise.com/posts/2699-making-sense-with-rubys-unless" target="_blank">&ldquo;Making Sense with Ruby’s ‘Unless’”</a>.</p>

<ol>
    <li>Don’t use else with unless.  Codeacademy does this in some of their examples with unless and they aren’t all that confusing but they aren’t that straightforward either. It’s probably better to use an if statement if you want to use else.</li>
    <li>Avoid using more than a single logical condition.  For example, doing things like <code>unless a && b</code> can become confusing fast.</li>
    <li>No double negatives.  Unless is already a negative so don’t add in a != to make it a double negative&#8230;that’s just bad english.</li>
</ol>




<h2>Inline Conditionals</h2>


<p>As mentioned when discussing unless, sometimes it’s best to write an if or unless statement on 1 line.  Here are some examples:</p>

<figure class='code'><figcaption><span>Multy Line If Statement</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">zipcode</span> <span class="o">&lt;</span> <span class="mi">5</span>
</span><span class='line'>  <span class="nb">fail</span> <span class="err">“</span><span class="n">zipcode</span> <span class="n">too</span> <span class="n">short</span><span class="err">”</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Can become:</p>

<figure class='code'><figcaption><span>Single Line If Statement </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">fail</span> <span class="err">“</span><span class="n">zipcode</span> <span class="n">too</span> <span class="n">short</span><span class="err">”</span> <span class="k">if</span> <span class="n">zipcode</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some more examples:</p>

<figure class='code'><figcaption><span>Single Line If Statement </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="err">“</span><span class="no">Input</span> <span class="n">your</span> <span class="nb">name</span><span class="p">:</span><span class="err">”</span> <span class="k">if</span> <span class="nb">name</span><span class="o">.</span><span class="n">empty?</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>Single Line Unless Statement </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="nb">fail</span> <span class="err">“</span><span class="n">no</span> <span class="n">username</span> <span class="n">set</span><span class="err">”</span> <span class="k">unless</span> <span class="n">username</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The Ruby Ternary Operator</h2>


<p>The ternary operator is another way to write an if else statement.  The word ternary means consisting of or involving three. The ruby ternary operator consists of the following 3 parts:</p>

<p>condition ? value if true : value if false</p>

<p>In this case the ? is analogous to the word THEN and the : is analogous to OR.  What a ternary operator is saying is if the condition evaluates to true THEN return the value if true OR if the condition evaluates to false, output the value if false.</p>

<p>This may not make sense 100% but an example should shore that up.</p>

<figure class='code'><figcaption><span>Ternary Operator Example </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">milk</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">milk</span> <span class="p">?</span> <span class="err">“</span><span class="no">We</span> <span class="n">have</span> <span class="n">milk</span><span class="err">”</span> <span class="p">:</span> <span class="err">“</span><span class="no">We</span> <span class="n">don</span><span class="err">’</span><span class="n">t</span> <span class="n">have</span> <span class="n">milk</span><span class="err">”</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here the ternary operator is saying if milk = true THEN puts “We have milk” OR if milk = false, puts “We don’t have milk.”</p>

<p>For simple if/else statements Ruby’s ternary operator can be a nice thing to use.</p>

<h2>Case Statements</h2>


<p>Sometimes using an if/else statement can be too wordy and that is when you need a case statement.  Instead of saying if, elsif, else, you simply use when, which is saying, when the conditional is true, run this code.</p>

<p>Here’s an example:</p>

<figure class='code'><figcaption><span>Case statement example </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">animal</span> <span class="o">=</span> <span class="err">“</span><span class="n">dog</span><span class="err">”</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">animal</span>
</span><span class='line'><span class="k">when</span> <span class="n">animal</span> <span class="o">==</span> <span class="err">“</span><span class="n">cat</span><span class="err">”</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="no">Meow</span><span class="o">!</span><span class="err">”</span>
</span><span class='line'><span class="k">when</span> <span class="n">animal</span> <span class="o">==</span> <span class="err">“</span><span class="n">parrot</span><span class="err">”</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="no">Polly</span> <span class="n">want</span> <span class="n">a</span> <span class="n">cracker!</span><span class="err">”</span>
</span><span class='line'><span class="k">when</span> <span class="n">animal</span> <span class="o">==</span> <span class="err">“</span><span class="n">dog</span><span class="err">”</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="no">Woof</span><span class="o">!</span><span class="err">”</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="no">What</span> <span class="n">animal</span> <span class="n">is</span> <span class="n">that?</span><span class="err">”</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Further reading on sase statements try &ndash; <a href="http://www.skorks.com/2009/08/how-a-ruby-case-statement-works-and-what-you-can-do-with-it" target="_blank">How A Ruby Case Statement Works and What You Can Do With It</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Procs are Amazing!]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/01/30/ruby-procs-are-amazing/"/>
    <updated>2014-01-30T09:12:44-05:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/01/30/ruby-procs-are-amazing</id>
    <content type="html"><![CDATA[<p>I just got through the <a href="http://www.codecademy.com/courses/ruby-beginner-en-L3ZCI/1/1?curriculum_id=5059f8619189a5000201fbcb" target="_blank">Codeacademy Procs section</a> and got so excited I tweeted about them and emailed my girlfriend explaining what Procs are and why they’re so cool&hellip;bad I know.  Luckily she works in finance and is a total excel geek so she can empathize and won’t think I’m a complete weirdo.</p>

<!-- more -->


<p><img class="center" src="http://kylefdoherty.github.io/images/proc_tweet.png" title="Proc Tweet" alt="Tweet about how cool Ruby Procs are"></p>

<p><img class="center" src="http://kylefdoherty.github.io/images/proc_email.png" title="Proc Email" alt="Email about how cool Ruby Procs are"></p>

<p>Since I already tweeted and sent an email about Procs I figured I’d post about them to round things out.</p>

<h2>Why Procs are Cool</h2>


<p>Procs allow you to save a block of code, something like <code>{ |x| x *3 }</code> which is saying take whatever I give you (x) and multiply it by 3.  What you can then do with this is pass it to methods.</p>

<p>So for example, I have an array of people&rsquo;s heights, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">4</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And I want to get all the heights that are above 4 feet tall because that&rsquo;s how tall you have to be to ride the ride&hellip;le duh.</p>

<p>I could write some long method called <code>rubyover_4_feet</code> where I pass it the array and then it returns the heights that are above 4 feet tall.  But that would require 9 lines of code&hellip;maybe less but that&rsquo;s how many lines it took me.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">over_4_feet</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>    <span class="n">new_arr</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>        <span class="k">unless</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span>
</span><span class='line'>            <span class="n">new_arr</span> <span class="o">&lt;&lt;</span> <span class="n">i</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">new_arr</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead I can call the method <code>.select</code> on the array and pass it a Proc that tells it to only select heights that are taller than 4 feet.</p>

<p>Below is a proc that checks for being over 4 feet tall. Then I just pass that proc to the <code>.select</code> method telling it to only &ldquo;select&rdquo; heights over 4 feet.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">over_4_feet</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">4</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="o">&amp;</span><span class="n">over_4_feet</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So what took me 9 lines of code I did in 1, since passing the Proc to select is the same as calling the over_4_feet method.</p>

<h3>AMAZING!!!</h3>


<p><a href="http://gifsoup.com/view/2169429/nets-fan.html" target="_blank"><img src="http://stream1.gifsoup.com/view3/2169429/nets-fan-o.gif" border="0"/></a><br /><a href="http://gifsoup.com" title="GIFSoup" target="_blank"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quite Your Job, Move to Switzerland, Learn to Program]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/01/30/quite-your-job-move-to-switzerland-learn-to-program/"/>
    <updated>2014-01-30T04:57:24-05:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/01/30/quite-your-job-move-to-switzerland-learn-to-program</id>
    <content type="html"><![CDATA[<p>A little over two weeks ago I tried to quit my job, moved to Switzerland, and began teaching myself programming with the goal of switching careers and becoming a developer full time.  I say “tried to quit my job” because I did officially quit, had my exit interview, the whole 9 yards, but then at the last minute was asked by our CMO to remain on part time and work remotely from Switzerland managing an internal project.</p>

<!-- more -->


<p>This turned out to be extremely fortuitous as part of the project requires me to build a Box.com app that automatically generates folder templates in the company’s Box account.  So while continueing to work part time will eat into my programming self study, nearly half of that time will be devoted to building a Box.com app with ruby, not to mention I’ll no longer be hemoraging my savings away each month as intially thought :).</p>

<p>I now spend Monday thru Friday from 9am to 7pm at the public library in the Swiss city where I live learning to program and so far it’s going swimmingly.</p>

<p><img class="center" src="http://kylefdoherty.github.io/images/public_library.jpg" title="Public Library" alt="An image of the public library where I study"></p>

<p>You might still be wondering how the Switzerland move came about. That was total random dumb luck.  I had already made my mind up about quitting my job and learning programming full time when my girlfriend got a new job with a Swiss company and was required to do a 6 month rotation in Switzerland.  Since she was going and I was planning on quiting there seemed no reason not to spend my time studying programming in Switzerland and skiing and eating fondu on the weekends, especially now that I have some income from working part time.</p>

<p><strong></p>

<pre><code>This blog is a place for me to write about how my homeschooling is progressing, what I’m learning, and other musings.  I hope it will not only facilitate in my learning, since writing about and teaching a topic is one of the best ways to learn, but maybe be helpful for other current and future self schooling programmers.
</code></pre>

<p></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeacademy Redactor Problem - Think About The Following...]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/01/30/codeacademy-redactor-problem-think-about-the-following-dot-dot-dot/"/>
    <updated>2014-01-30T04:45:04-05:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/01/30/codeacademy-redactor-problem-think-about-the-following-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>At the end of the Redacted! project in Codeacademy’s Ruby track they ask you to think about a few things:</p>

<p>What could you do to make sure your redactor redacts a word regardless of whether it&rsquo;s uppercase or lowercase?
How could you make your program take multiple, separate words to REDACT?
How might you make a new redacted string and save it as a variable, rather than just printing it to the console?
Below I’ve shown how I solved each of these so other people doing this problem can see how I solved it, critique my code, and share their solutions.</p>

<!-- more -->


<p>As a starting point here is my code for the initial Redacted project before I began solving for the above questions.</p>

<figure class='code'><figcaption><span>Original code:</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;block of text:&quot;</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;word to be redacted:&quot;</span>
</span><span class='line'><span class="n">redact</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="n">redact</span>
</span><span class='line'>        <span class="nb">print</span> <span class="s2">&quot;REDACTED &quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nb">print</span> <span class="n">word</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<h2>Question #1 - What could you do to make sure your redactor redacts a word regardless of whether it&#8217;s uppercase or lowercase?</h2>


<p>To achieve this I figured I had two options.  Either downcase (or upcase) the block of text and the word(s) to be redacted given by the user as soon as they’re given by the user or do this when they are being compared.  Below are both ways.</p>

<figure class='code'><figcaption><span>When given by user:</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;block of text:&quot;</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;word to be redacted:&quot;</span>
</span><span class='line'><span class="n">redact</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="n">redact</span>
</span><span class='line'>        <span class="nb">print</span> <span class="s2">&quot;REDACTED &quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nb">print</span> <span class="n">word</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>When comparing:</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;block of text:&quot;</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;word to be redacted:&quot;</span>
</span><span class='line'><span class="n">redact</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">word</span><span class="o">.</span><span class="n">downcase</span> <span class="o">==</span> <span class="n">redact</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>        <span class="nb">print</span> <span class="s2">&quot;REDACTED &quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nb">print</span> <span class="n">word</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<h2>Question #2 - How could you make your program take multiple, separate words to REDACT?</h2>


<p>First I need to make it so the user can input as many words to be redacted as they want.  To achieve this I used a while loop and an if statement.  If the user inputs a keyword signifying they are done inputting words to be redacted the while loop breaks.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">while</span> <span class="n">input</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">input</span><span class="o">.</span><span class="n">downcase</span> <span class="o">==</span> <span class="s2">&quot;done&quot;</span>
</span><span class='line'>      <span class="k">break</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">redact</span> <span class="o">&lt;&lt;</span> <span class="n">input</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here I make “done” the keyword that breaks the while loop.</p>

<p>Next, I needed to figure out how to compare the two arrays, redact and words.  Funny enough after a quick search on comparing two arrays I found out that using &amp; is one way to compare two arrays and see what objects they have in common (<a href="http://blog.hulihanapplications.com/browse/view/28-ruby-array-comparison-tricks">http://blog.hulihanapplications.com/browse/view/28-ruby-array-comparison-tricks</a>).  So if you write redact &amp; words the output will be the objects they have in common.  I thought this was interesting but didn’t really help me because it basically just recreated my redact array.
Next I broke down what I need to do in plain english, hoping that would help me break down the problem and figure out how to solve it with the little ruby I know and myabe a little help from Google.
Breaking it Down
The first thing I know I needed to do was loop through the words array with .each and then see if that word matches any words in the redact array.  So effectively what I’m doing is comparing a string to an array.  With a google search of “compare a string to an array ruby” I found that there is an .include? method for arrays that does exactly this (<a href="http://stackoverflow.com/questions/3770316/how-to-compare-a-string-against-multiple-other-strings">http://stackoverflow.com/questions/3770316/how-to-compare-a-string-against-multiple-other-strings</a>).  It works by calling the .include? method on the array and passing it a string. It then checks to see if that string is included in the array.  PERFECT!</p>

<p>Here is what it looks like in code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">words</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">redact</span><span class="o">.</span><span class="n">include?</span> <span class="n">word</span>
</span><span class='line'>    <span class="nb">print</span> <span class="s2">&quot;REDACTED &quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">print</span> <span class="n">word</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here is the entire script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">redact</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;block of text:&quot;</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Give as many words to be redacted as you want.&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Once you are done type </span><span class="se">\&#39;</span><span class="s2">done</span><span class="se">\&#39;</span><span class="s2">.&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Please give the words you want redacted:&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="n">input</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">input</span><span class="o">.</span><span class="n">downcase</span> <span class="o">==</span> <span class="s2">&quot;done&quot;</span>
</span><span class='line'>      <span class="k">break</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">redact</span> <span class="o">&lt;&lt;</span> <span class="n">input</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#common_words = redact &amp; words</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">redact</span><span class="o">.</span><span class="n">include?</span> <span class="n">word</span>
</span><span class='line'>    <span class="nb">print</span> <span class="s2">&quot;REDACTED &quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">print</span> <span class="n">word</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<h2>Question #3 - How might you make a new redacted string and save it as a variable, rather than just printing it to the console?</h2>


<p>I skipped this question because it didn’t seem to make sense for my script.  Since I allow the user to input multiple strings to redact that are then saved in the array redact there seems to be no reason to save a new redacted string.  What would you do with it?
If you have a better sense of what they are asking here please let me know.</p>
]]></content>
  </entry>
  
</feed>
