<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Programming <br> & <br> Stuff]]></title>
  <link href="http://kylefdoherty.github.io/atom.xml" rel="self"/>
  <link href="http://kylefdoherty.github.io/"/>
  <updated>2014-02-07T12:40:25+01:00</updated>
  <id>http://kylefdoherty.github.io/</id>
  <author>
    <name><![CDATA[Kyle Doherty]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Notes - Control Flow]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/02/07/ruby-notes-flow-control/"/>
    <updated>2014-02-07T10:52:33+01:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/02/07/ruby-notes-flow-control</id>
    <content type="html"><![CDATA[<p>I’m 4 weeks into my 25 hours a week of Ruby self-study (I work part time right now otherwise it’d be 40+ hours) and just completed
<a href="http://www.codecademy.com/tracks/ruby" target="_blank">Codecademy’s Ruby track.</a>  Finishing was great but I felt I&rsquo;d  only scratched the surface of Ruby and programming in general.  To supplement my minimal Ruby knowledge I decided to begin additional research and create study notes and do practice problems for each topic covered by Codecadmny, such as control flow, arrays, blocks, etc.  This has already proven a success as I’ve seen a marked difference in my confidence and coding ability after completing notes for Control Flow and Arrays.</p>

<p>Now I’ve decided to turn my notes and practice problems into blog posts because:</p>

<ol> 
  <li>Hopefully it will be helpful to other people learning Ruby</li>
  <li>It forces me to read through my notes and practice problems again</li>
  <li>It requires rewriting my notes in way that others can understand thus further driving the concepts home for me</li>
  <li>Hopefully I’ll get feedback on my notes and practice problems (hint hint)</li>
</ol>




<h2>Control Flow</h2>


<p>Control flow allows you to control how your ruby script executes based on conditions.  For example, <code>if</code> condition A is met then do B OR <code>unless</code> B happens do A.</p>

<h2>If Statement</h2>


<p>An if statement tells the program what to do if a condition is met. That is, if the conditional that comes after <code>if</code> is true then execute the following code. If it evaluates to false, it doesn’t execute.</p>

<figure class='code'><figcaption><span>Example 1 - If Statements</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">money</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">money</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="no">You</span> <span class="n">have</span> <span class="n">money</span><span class="o">.</span><span class="err">”</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This if statement is saying if the variable money is true, puts the message “You have money.”  In this case if money were set to false, nothing will puts to the screen.</p>

<figure class='code'><figcaption><span>Example 2 - If Statements </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="mi">2</span> <span class="o">&lt;</span> <span class="mi">3</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="mi">2</span> <span class="n">is</span> <span class="n">less</span> <span class="n">than</span> <span class="mi">3</span><span class="err">”</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since 2 is less than 3 this if statement evaluates to true and thus puts’ “2 is less than 3”.  If we had typed <code>if 2 > 3</code>, puts would not have been executed and ‘nil’ would have been returned because the if statement would have evaluated to false.</p>

<h2>If/Else Statement</h2>


<p>Adding an else into the if statement essentially creates a default i.e. in the event whatever comes after <code>if</code> is false then do this.</p>

<figure class='code'><figcaption><span>Example - If/Else Statement</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">password</span> <span class="o">=</span> <span class="mi">12345678</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span>  <span class="n">password</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;=</span> <span class="mi">8</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="n">your</span> <span class="n">password</span> <span class="n">is</span> <span class="n">long</span> <span class="n">enough</span><span class="err">”</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="n">your</span> <span class="n">password</span> <span class="n">is</span> <span class="n">too</span> <span class="n">short</span><span class="err">”</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<h2>If/Elsif/Else</h2>


<p>Using an elsif allows for multiple conditions to be added to the if statement.  In this way we can essentially add multiple if statements to check for many different possible conditions.</p>

<figure class='code'><figcaption><span>Example - If/Elsif/Else Statement </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">city</span> <span class="o">=</span> <span class="err">“</span><span class="no">San</span> <span class="no">Francisco</span><span class="err">”</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">city</span> <span class="o">==</span> <span class="err">“</span><span class="no">New</span> <span class="no">York</span><span class="err">”</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="no">Jets</span> <span class="o">&amp;</span> <span class="no">Giants</span><span class="err">”</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">city</span> <span class="o">==</span> <span class="err">“</span><span class="no">Denver</span><span class="err">”</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="no">Broncos</span><span class="err">”</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">city</span> <span class="o">==</span> <span class="err">“</span><span class="no">San</span> <span class="no">Francisco</span><span class="err">”</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="mi">49</span><span class="n">ers</span><span class="err">”</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="no">Hmm</span> <span class="n">we</span> <span class="n">don</span><span class="err">’</span><span class="n">t</span> <span class="n">know</span> <span class="n">what</span> <span class="no">NFL</span> <span class="n">team</span> <span class="n">that</span> <span class="n">city</span> <span class="n">has</span><span class="o">.</span><span class="err">”</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the variable <code>city</code> is set to any of the cities in our If/Else statement, the program will puts what NFL team that city has.  If <code>city</code> is not set to one of those cities then the program puts the default message, &ldquo;Hmm we don’t know what NFL team that city has.”</p>

<h2>Unless</h2>


<p>Unless is the opposite of an if statement.  An if statement only executes if the conditional is true, conversely unless only executes if the conditional is false.  It’s good practice to use unless instead of using <code>if !=</code> (if not equal to) since <code>if !=</code> can be a bit confusing.</p>

<p>The following if statement can be replaced with an unless statement.</p>

<figure class='code'><figcaption><span>Example of Bad If Statement</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Give us a message.&quot;</span>
</span><span class='line'><span class="n">message</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">message</span> <span class="o">!=</span> <span class="err">“”</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="c1">#{message}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>By using unless this piece of code becomes much more readable.</p>

<figure class='code'><figcaption><span>Example of When to Use Unless</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Give us a message.&quot;</span>
</span><span class='line'><span class="n">message</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="k">unless</span> <span class="n">message</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another good use case for Unless is to use them in a single line like so:</p>

<figure class='code'><figcaption><span>Example 2 - When to Use Unless </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">milk</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="err">“</span><span class="no">We</span><span class="err">’</span><span class="n">re</span> <span class="n">out</span> <span class="n">of</span> <span class="n">milk</span><span class="o">.</span><span class="err">”</span> <span class="k">unless</span> <span class="n">milk</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; We’re out of milk</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we’re saying only puts we’re out of milk if the milk variable is set to false.  Since in this case milk is set to false then the message would be shown to the screen.</p>

<p>One more example:</p>

<figure class='code'><figcaption><span>Example 3 - When to Use Unless</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">unless</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here <code>i</code> is being increased by 1 unless it is more than 10.</p>

<h3>Unless Best Practices</h3>


<p>There are some best practices you should follow when using unless to ensure you don’t confuse people or yourself.  These aren’t universal, especially considering the Codecademy section on control flow doesn’t follow all of them, but after doing some research I’ve found these best practices given several places such as <a href="https://www.codeschool.com/courses/ruby-bits" target="_blank">Code School’s Ruby Code Bits course</a> and a blog post on the 37Signals blog called <a href="http://signalvnoise.com/posts/2699-making-sense-with-rubys-unless" target="_blank">&ldquo;Making Sense with Ruby’s ‘Unless’”</a>.</p>

<ol>
    <li>Don’t use else with unless.  Codeacademy does this in some of their examples with unless and they aren’t all that confusing but they aren’t that straightforward either. It’s probably better to use an if statement if you want to use else.</li>
    <li>Avoid using more than a single logical condition.  For example, doing things like <code>unless a && b</code> can become confusing fast.</li>
    <li>No double negatives.  Unless is already a negative so don’t add in a != to make it a double negative&#8230;that’s just bad english.</li>
</ol>




<h2>Inline Conditionals</h2>


<p>As mentioned when discussing unless, sometimes it’s best to write an if or unless statement on 1 line.  Here are some examples:</p>

<figure class='code'><figcaption><span>Multy Line If Statement</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">zipcode</span> <span class="o">&lt;</span> <span class="mi">5</span>
</span><span class='line'>  <span class="nb">fail</span> <span class="err">“</span><span class="n">zipcode</span> <span class="n">too</span> <span class="n">short</span><span class="err">”</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Can become:</p>

<figure class='code'><figcaption><span>Single Line If Statement </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">fail</span> <span class="err">“</span><span class="n">zipcode</span> <span class="n">too</span> <span class="n">short</span><span class="err">”</span> <span class="k">if</span> <span class="n">zipcode</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some more examples:</p>

<figure class='code'><figcaption><span>Single Line If Statement </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="err">“</span><span class="no">Input</span> <span class="n">your</span> <span class="nb">name</span><span class="p">:</span><span class="err">”</span> <span class="k">if</span> <span class="nb">name</span><span class="o">.</span><span class="n">empty?</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>Single Line Unless Statement </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="nb">fail</span> <span class="err">“</span><span class="n">no</span> <span class="n">username</span> <span class="n">set</span><span class="err">”</span> <span class="k">unless</span> <span class="n">username</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The Ruby Ternary Operator</h2>


<p>The ternary operator is another way to write an if else statement.  The word ternary means consisting of or involving three. The ruby ternary operator consists of the following 3 parts:</p>

<p>condition ? value if true : value if false</p>

<p>In this case the ? is analogous to the word THEN and the : is analogous to OR.  What a ternary operator is saying is if the condition evaluates to true THEN return the value if true OR if the condition evaluates to false, output the value if false.</p>

<p>This may not make sense 100% but an example should shore that up.</p>

<figure class='code'><figcaption><span>Ternary Operator Example </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">milk</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">milk</span> <span class="p">?</span> <span class="err">“</span><span class="no">We</span> <span class="n">have</span> <span class="n">milk</span><span class="err">”</span> <span class="p">:</span> <span class="err">“</span><span class="no">We</span> <span class="n">don</span><span class="err">’</span><span class="n">t</span> <span class="n">have</span> <span class="n">milk</span><span class="err">”</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here the ternary operator is saying if milk = true THEN puts “We have milk” OR if milk = false, puts “We don’t have milk.”</p>

<p>For simple if/else statements Ruby’s ternary operator can be a nice thing to use.</p>

<h2>Case Statements</h2>


<p>Sometimes using an if/else statement can be too wordy and that is when you need a case statement.  Instead of saying if, elsif, else, you simply use when, which is saying, when the conditional is true, run this code.</p>

<p>Here’s an example:</p>

<figure class='code'><figcaption><span>Case statement example </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">animal</span> <span class="o">=</span> <span class="err">“</span><span class="n">dog</span><span class="err">”</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">animal</span>
</span><span class='line'><span class="k">when</span> <span class="n">animal</span> <span class="o">==</span> <span class="err">“</span><span class="n">cat</span><span class="err">”</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="no">Meow</span><span class="o">!</span><span class="err">”</span>
</span><span class='line'><span class="k">when</span> <span class="n">animal</span> <span class="o">==</span> <span class="err">“</span><span class="n">parrot</span><span class="err">”</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="no">Polly</span> <span class="n">want</span> <span class="n">a</span> <span class="n">cracker!</span><span class="err">”</span>
</span><span class='line'><span class="k">when</span> <span class="n">animal</span> <span class="o">==</span> <span class="err">“</span><span class="n">dog</span><span class="err">”</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="no">Woof</span><span class="o">!</span><span class="err">”</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="no">What</span> <span class="n">animal</span> <span class="n">is</span> <span class="n">that?</span><span class="err">”</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Further reading on sase statements try &ndash; <a href="http://www.skorks.com/2009/08/how-a-ruby-case-statement-works-and-what-you-can-do-with-it" target="_blank">How A Ruby Case Statement Works and What You Can Do With It</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Procs are Amazing!]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/01/30/ruby-procs-are-amazing/"/>
    <updated>2014-01-30T15:12:44+01:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/01/30/ruby-procs-are-amazing</id>
    <content type="html"><![CDATA[<p>I just got through the <a href="http://www.codecademy.com/courses/ruby-beginner-en-L3ZCI/1/1?curriculum_id=5059f8619189a5000201fbcb" target="_blank">Codeacademy Procs section</a> and got so excited I tweeted about them and emailed my girlfriend explaining what Procs are and why they’re so cool&hellip;bad I know.  Luckily she works in finance and is a total excel geek so she can empathize and won’t think I’m a complete weirdo.</p>

<p><img class="center" src="http://kylefdoherty.github.io/images/proc_tweet.png" title="Proc Tweet" alt="Tweet about how cool Ruby Procs are"></p>

<p><img class="center" src="http://kylefdoherty.github.io/images/proc_email.png" title="Proc Email" alt="Email about how cool Ruby Procs are"></p>

<p>Since I already tweeted and sent an email about Procs I figured I’d post about them to round things out.</p>

<h2>Why Procs are Cool</h2>


<p>Procs allow you to save a block of code, something like <code>{ |x| x *3 }</code> which is saying take whatever I give you (x) and multiply it by 3.  What you can then do with this is pass it to methods.</p>

<p>So for example, I have an array of people&rsquo;s heights, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">4</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And I want to get all the heights that are above 4 feet tall because that&rsquo;s how tall you have to be to ride the ride&hellip;le duh.</p>

<p>I could write some long method called <code>rubyover_4_feet</code> where I pass it the array and then it returns the heights that are above 4 feet tall.  But that would require 9 lines of code&hellip;maybe less but that&rsquo;s how many lines it took me.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">over_4_feet</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>    <span class="n">new_arr</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>        <span class="k">unless</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span>
</span><span class='line'>            <span class="n">new_arr</span> <span class="o">&lt;&lt;</span> <span class="n">i</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">new_arr</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead I can call the method <code>.select</code> on the array and pass it a Proc that tells it to only select heights that are taller than 4 feet.</p>

<p>Below is a proc that checks for being over 4 feet tall. Then I just pass that proc to the <code>.select</code> method telling it to only &ldquo;select&rdquo; heights over 4 feet.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">over_4_feet</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">4</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="o">&amp;</span><span class="n">over_4_feet</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So what took me 9 lines of code I did in 1, since passing the Proc to select is the same as calling the over_4_feet method.</p>

<h3>AMAZING!!!</h3>


<p><a href="http://gifsoup.com/view/2169429/nets-fan.html" target="_blank"><img src="http://stream1.gifsoup.com/view3/2169429/nets-fan-o.gif" border="0"/></a><br /><a href="http://gifsoup.com" title="GIFSoup" target="_blank"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quite Your Job, Move to Switzerland, Learn to Program]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/01/30/quite-your-job-move-to-switzerland-learn-to-program/"/>
    <updated>2014-01-30T10:57:24+01:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/01/30/quite-your-job-move-to-switzerland-learn-to-program</id>
    <content type="html"><![CDATA[<p>A little over two weeks ago I tried to quit my job, moved to Switzerland, and began teaching myself programming with the goal of switching careers and becoming a developer full time.  I say “tried to quit my job” because I did officially quit, had my exit interview, the whole 9 yards, but then at the last minute was asked by our CMO to remain on part time and work remotely from Switzerland managing an internal project.</p>

<p>This turned out to be extremely fortuitous as part of the project requires me to build a Box.com app that automatically generates folder templates in the company’s Box account.  So while continueing to work part time will eat into my programming self study, nearly half of that time will be devoted to building a Box.com app with ruby, not to mention I’ll no longer be hemoraging my savings away each month as intially thought :).</p>

<p>I now spend Monday thru Friday from 9am to 7pm at the public library in the Swiss city where I live learning to program and so far it’s going swimmingly.</p>

<p><img class="center" src="http://kylefdoherty.github.io/images/public_library.jpg" title="Public Library" alt="An image of the public library where I study"></p>

<p>You might still be wondering how the Switzerland move came about. That was complete happenstance.  I had already made my mind up about quitting my job and learning programming full time when my girlfriend got a new job with a Swiss company and was required to do a 6 month rotation in Switzerland.  Since she was going and I was planning on quiting there seemed no reason not to spend my time studying programming in Switzerland and skiing and eating fondu on the weekends, especially now that I have some income from working part time.</p>

<h3>
    This blog is a place for me to write about how my homeschooling is progressing, what I’m learning, and other musings.  I hope it will not only facilitate in my learning, since writing about and teaching a topic is one of the best ways to learn, but maybe be helpful for other current and future self schooling programmers.
</h3>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeacademy Redactor Problem - Think About The Following...]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/01/30/codeacademy-redactor-problem-think-about-the-following-dot-dot-dot/"/>
    <updated>2014-01-30T10:45:04+01:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/01/30/codeacademy-redactor-problem-think-about-the-following-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>At the end of the Redacted! project in Codeacademy’s Ruby track they ask you to think about a few things:</p>

<p>What could you do to make sure your redactor redacts a word regardless of whether it&rsquo;s uppercase or lowercase?
How could you make your program take multiple, separate words to REDACT?
How might you make a new redacted string and save it as a variable, rather than just printing it to the console?
Below I’ve shown how I solved each of these so other people doing this problem can see how I solved it, critique my code, and share their solutions.</p>

<p>As a starting point here is my code for the initial Redacted project before I began solving for the above questions.</p>

<figure class='code'><figcaption><span>Original code:</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;block of text:&quot;</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;word to be redacted:&quot;</span>
</span><span class='line'><span class="n">redact</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="n">redact</span>
</span><span class='line'>        <span class="nb">print</span> <span class="s2">&quot;REDACTED &quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nb">print</span> <span class="n">word</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<h2>Question #1 - What could you do to make sure your redactor redacts a word regardless of whether it&#8217;s uppercase or lowercase?</h2>


<p>To achieve this I figured I had two options.  Either downcase (or upcase) the block of text and the word(s) to be redacted given by the user as soon as they’re given by the user or do this when they are being compared.  Below are both ways.</p>

<figure class='code'><figcaption><span>When given by user:</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;block of text:&quot;</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;word to be redacted:&quot;</span>
</span><span class='line'><span class="n">redact</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="n">redact</span>
</span><span class='line'>        <span class="nb">print</span> <span class="s2">&quot;REDACTED &quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nb">print</span> <span class="n">word</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>When comparing:</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;block of text:&quot;</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;word to be redacted:&quot;</span>
</span><span class='line'><span class="n">redact</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">word</span><span class="o">.</span><span class="n">downcase</span> <span class="o">==</span> <span class="n">redact</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>        <span class="nb">print</span> <span class="s2">&quot;REDACTED &quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nb">print</span> <span class="n">word</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<h2>Question #2 - How could you make your program take multiple, separate words to REDACT?</h2>


<p>First I need to make it so the user can input as many words to be redacted as they want.  To achieve this I used a while loop and an if statement.  If the user inputs a keyword signifying they are done inputting words to be redacted the while loop breaks.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">while</span> <span class="n">input</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">input</span><span class="o">.</span><span class="n">downcase</span> <span class="o">==</span> <span class="s2">&quot;done&quot;</span>
</span><span class='line'>      <span class="k">break</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">redact</span> <span class="o">&lt;&lt;</span> <span class="n">input</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here I make “done” the keyword that breaks the while loop.</p>

<p>Next, I needed to figure out how to compare the two arrays, redact and words.  Funny enough after a quick search on comparing two arrays I found out that using &amp; is one way to compare two arrays and see what objects they have in common (<a href="http://blog.hulihanapplications.com/browse/view/28-ruby-array-comparison-tricks">http://blog.hulihanapplications.com/browse/view/28-ruby-array-comparison-tricks</a>).  So if you write redact &amp; words the output will be the objects they have in common.  I thought this was interesting but didn’t really help me because it basically just recreated my redact array.
Next I broke down what I need to do in plain english, hoping that would help me break down the problem and figure out how to solve it with the little ruby I know and myabe a little help from Google.
Breaking it Down
The first thing I know I needed to do was loop through the words array with .each and then see if that word matches any words in the redact array.  So effectively what I’m doing is comparing a string to an array.  With a google search of “compare a string to an array ruby” I found that there is an .include? method for arrays that does exactly this (<a href="http://stackoverflow.com/questions/3770316/how-to-compare-a-string-against-multiple-other-strings">http://stackoverflow.com/questions/3770316/how-to-compare-a-string-against-multiple-other-strings</a>).  It works by calling the .include? method on the array and passing it a string. It then checks to see if that string is included in the array.  PERFECT!</p>

<p>Here is what it looks like in code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">words</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">redact</span><span class="o">.</span><span class="n">include?</span> <span class="n">word</span>
</span><span class='line'>    <span class="nb">print</span> <span class="s2">&quot;REDACTED &quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">print</span> <span class="n">word</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here is the entire script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">redact</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;block of text:&quot;</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Give as many words to be redacted as you want.&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Once you are done type </span><span class="se">\&#39;</span><span class="s2">done</span><span class="se">\&#39;</span><span class="s2">.&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Please give the words you want redacted:&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="n">input</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">input</span><span class="o">.</span><span class="n">downcase</span> <span class="o">==</span> <span class="s2">&quot;done&quot;</span>
</span><span class='line'>      <span class="k">break</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">redact</span> <span class="o">&lt;&lt;</span> <span class="n">input</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#common_words = redact &amp; words</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">redact</span><span class="o">.</span><span class="n">include?</span> <span class="n">word</span>
</span><span class='line'>    <span class="nb">print</span> <span class="s2">&quot;REDACTED &quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">print</span> <span class="n">word</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<h2>Question #3 - How might you make a new redacted string and save it as a variable, rather than just printing it to the console?</h2>


<p>I skipped this question because it didn’t seem to make sense for my script.  Since I allow the user to input multiple strings to redact that are then saved in the array redact there seems to be no reason to save a new redacted string.  What would you do with it?
If you have a better sense of what they are asking here please let me know.</p>
]]></content>
  </entry>
  
</feed>
