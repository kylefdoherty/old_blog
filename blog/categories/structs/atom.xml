<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Structs | Learning Programming <br> & <br> Stuff]]></title>
  <link href="http://kylefdoherty.github.io/blog/categories/structs/atom.xml" rel="self"/>
  <link href="http://kylefdoherty.github.io/"/>
  <updated>2014-06-11T12:40:44-04:00</updated>
  <id>http://kylefdoherty.github.io/</id>
  <author>
    <name><![CDATA[Kyle Doherty]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Notes - Structs]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/03/07/structs/"/>
    <updated>2014-03-07T10:11:19-05:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/03/07/structs</id>
    <content type="html"><![CDATA[<p>I recently learned about Structs while working my way through <a href="http://pragmaticstudio.com/courses" target="_blank">Pragmatic Studio’s Ruby Programming course</a>, which I highly recommend btw.  If you’re a beginner like me it will apply your basic Ruby knowledge to a project and teach you some new things along the way&hellip;like Structs.</p>

<h2>What Are Structs</h2>


<p>Structs are simply a collection of attributes, meaning they only have state, whereas Classes have both attributes and methods (state and behavior).  To illustrate imagine we have a library class containing a bunch of book objects (its state) that you can check out and do other things to (its behavior). This type of object, since it has state and behavior warrants using a class.</p>

<p>``` ruby Library Class
class Library
  def initialize</p>

<pre><code>@books = []
</code></pre>

<p>  end</p>

<p>  def checkout</p>

<pre><code># code to checkout a book
</code></pre>

<p>  end
end<br/>
```
Now, let’s assume the book objects the library class will contain won’t have any behavior i.e. they won’t have methods, they’ll simply have attributes such as: <code>@title</code>, <code>@author</code>, and <code>@page_number</code>.  We could create a book class like this:</p>

<p>```ruby Book Class
class Book
  attr_reader :title, :author, :page_number</p>

<p>  def initialize(title, author, page_number)</p>

<pre><code>@title = title
@author = author
@page_number = page_number
</code></pre>

<p>  end
end
```
OR since the book object has no methods we can use a Struct like so:</p>

<p>```ruby Book Struct
Book = Struct.new(:title, :author, :page_number)</p>

<h1>=> Book</h1>

<p>Book.class</p>

<h1>=> Class</h1>

<p>```
Using a Struct required far less code than writing out the book class ourselves and by calling <code>.class</code> on Book we can see that <code>Struct.new</code> actually went and generated the book class we made above for us&hellip;pretty cool huh!</p>

<h2>Create Object Instances</h2>


<p>With this Book class we can create as many new book objects as we want by calling <code>Book.new</code> and passing it a title, author, and number of pages, like below:</p>

<p>```ruby
book1 = Book.new(“Learn to Program”, “Chris Pine”, 171)</p>

<h1>=> <struct Book title="Learn to Program", author="Chris Pine", page_number=171></h1>

<p>book2 = Book.new(“The Well Grounded Rubyist”, “David A. Black”, 500)</p>

<h1>=> <struct Book title="The Well Grounded Rubyist", author="David A. Black", page_number=500></h1>

<p>book3 = Book.new(“Programming Ruby 1.9 &amp; 2.0: The Pragmatic Programmers Guide (The Facets of Ruby)”, “Dave Thomas, Andy Hunt, Chris Fowler”, 888)</p>

<h1>=> <struct Book title="Programming Ruby 1.9 & 2.0: The Pragmatic Programmers' Guide (The Facets of Ruby)", author="Dave Thomas, Andy Hunt, Chris Fowler", page_number=888></h1>

<p>```
This code instantiated 3 new book objects each with readable and writable attributes.  One interesting thing about these book objects is they are actually Struct objects and therefore have some handy struct methods for accessing their attributes.</p>

<h2>Accessing Attributes</h2>


<p>In addition to the normal way of accessing class attributes you can also use the <code>[]</code> method to access attributes like you would from an array by inserting the index in the brackets or like you from a hash by inserting the key in the brackets.  Here are some examples:</p>

<p>```ruby Accessing Struct Attributes
book1[0]</p>

<h1>=> “Learn to Program”</h1>

<p>book1[“title”]</p>

<h1>=> “Learn to Program”</h1>

<p>book1[:title]</p>

<h1>=> “Learn to Program”</h1>

<p>```</p>

<p>As you can see you can access the <code>title</code> attribute by index or by name using a String or Symbol.</p>

<h2>Learn More About Structs</h2>




<ul>
  <li>You can see more Struct methods by checking out the <a href="http://ruby-doc.org/core-1.9.3/Struct.html" target="_blank">Struct Class doc</a>.</li>

  <li>For a more comprehensive explination of Structs read the blog post <a href="http://blog.rubybestpractices.com/posts/rklemme/017-Struct.html" target="_blank">Structs Inside and Out</a></li>

  <li>If you want to make Read-only Structs check out the <a href="https://github.com/janlelis/value_struct" target="_blank">Value Struct Gem</a> and this <a href="http://ruby.janlelis.de/65-value_struct-read-only-structs-in-ruby" target="_blank">blog post</a> about it.</li>
</ul>



]]></content>
  </entry>
  
</feed>
