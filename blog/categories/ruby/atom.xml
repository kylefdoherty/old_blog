<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Learning Programming <br> & <br> Stuff]]></title>
  <link href="http://kylefdoherty.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://kylefdoherty.github.io/"/>
  <updated>2014-02-19T12:13:16+01:00</updated>
  <id>http://kylefdoherty.github.io/</id>
  <author>
    <name><![CDATA[Kyle Doherty]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Recoding My RSS Twitter Bot]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/02/19/recoding-my-rss-twitter-bot/"/>
    <updated>2014-02-19T12:03:44+01:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/02/19/recoding-my-rss-twitter-bot</id>
    <content type="html"><![CDATA[<p>My last blog post about my RSS Twitter Bot made realize a lot of flaws with my bot, not only in the code I wrote but the choices I made about what to code.  This led me to re-code the entire bot, but I think the code is much cleaner now.</p>

<p>```ruby  Recoded RSS Twitter Bot
require &lsquo;rss&rsquo;
require &lsquo;open-uri&rsquo;
require &lsquo;twitter&rsquo;
require &lsquo;yaml&rsquo;</p>

<p>class FeedParser</p>

<pre><code>def initialize(*feeds)
    @feeds = feeds 
    @tweet = ""
    @pub_date = ""
    @tweet_length = Proc.new{ 
        if @tweet.length &gt; 140
            next 
        else 
            tweeter(@tweet)
            puts "tweeted"

            sleep(15)
        end 
    }

    config = YAML.load_file('config.yml')

    @client = Twitter::REST::Client.new({
        consumer_key: config['consumer_key'],
        consumer_secret: config['consumer_secret'],
        access_token: config['access_token'],
        access_token_secret: config['access_token_secret']
    })

end 

def run 
    feed_sorter
end 
</code></pre>

<h1>method that sorts feeds</h1>

<pre><code>def feed_sorter
    @feeds.each do |url|
        open(url) do |rss|
        feed = RSS::Parser.parse(rss)

            case 
            when feed.feed_type == "rss"
                rss_parser(feed)
            when feed.feed_type == "atom"
                atom_parser(feed) 
            end 
        end 
    end 
end 

def rss_parser(rss)
    rss.items.each do |item| 
        title = item.title
        link = item.link
        @tweet = "#{title} #{link}"
        @tweet_length.call 

    end 
end 


def atom_parser(atom)
    atom.items.each do |item| 
        title = item.title.content
        link = item.link.href
        @tweet = "#{title} #{link}"
        @tweet_length.call

    end 
end 

def tweeter(tweet)
    @client.update(tweet)
end 
</code></pre>

<p>end</p>

<p>parser = FeedParser.new(&lsquo;<a href="https://gdata.youtube.com/feeds/api/users/goaztecscom/uploads">https://gdata.youtube.com/feeds/api/users/goaztecscom/uploads</a>&rsquo;, &lsquo;<a href="http://www.utsandiego.com/rss/headlines/sports/sdsu-aztecs/">http://www.utsandiego.com/rss/headlines/sports/sdsu-aztecs/</a>&rsquo;)
parser.run
```</p>

<h2>I Switched to the RSS Module</h2>


<p>During and after writing the first post about my Twitter Bot I did more research into the Ruby RSS Module and found that it has <code>.feed_type</code> method that allows you to easily sort the types of feeds so you can use the correct methods to parse them.  Sorting the feeds this way is infinitely better than the weird/incorrect way I was doing it before albeit it was good practice with hashes.</p>

<p>```ruby Sorting Feeds with the RSS Module
@feeds.each do |url|</p>

<pre><code>open(url) do |rss|
feed = RSS::Parser.parse(rss)

    case 
    when feed.feed_type == "rss"
        rss_parser(feed)
    when feed.feed_type == "atom"
        atom_parser(feed) 
    end 
end 
</code></pre>

<p>end
```</p>

<h2>I Finally Used a Proc in my Code</h2>


<p>I remember learning about Procs and Lamdas on Codecademy and thinking they were pretty cool&hellip;ok really cool.  Since that time I haven’t used them in my code, accept when trying to code FizzBuzz in as many different ways as possible, which sort of makes sense since everything I’m doing is super simple, but still&hellip;I want to use a some damn Procs.</p>

<p>Finally, I found a reason.  When re-coding my bot I decided there was no reason to try and adjust the length of the feed titles because eventually my bot will hopefully use a URL shortener, meaning 99.99% of the time the titles will never make the tweet go over 140 characters.  Still I needed an easy way to keep <code>@tweets</code> that are over 140 characters from being sent to the <code>.tweeter</code> method and causing an error.  Obviously, I could stick an if/else statement in a method and call it from the &lt;.rss> and &lt;.atom> methods, but using a Proc sounded way more fun :).</p>

<p>```ruby Using a Proc
@tweet_length = Proc.new{
if @tweet.length > 140</p>

<pre><code>    next 
else 
    tweeter(@tweet)
    puts "tweeted"
    sleep(15)
end 
</code></pre>

<p>}
```</p>

<h2>Next Steps</h2>


<ol>
  <li>Check for new articles, videos, etc. in the feeds and only tweet the new ones</li>
  <li>Learn Sinatra and turn this into a Sinatra App</li>
  <li>Add a url shortner like bit.ly or roll my own</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Notes - Working with Files]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/02/17/ruby-notes-working-with-files/"/>
    <updated>2014-02-17T22:56:05+01:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/02/17/ruby-notes-working-with-files</id>
    <content type="html"><![CDATA[<p>My next “Ruby Notes” post was going to be on arrays but in my last couple of mini projects, <a href="https://github.com/kylefdoherty/ruby-quiz-solutions/tree/master/text_munger_76" target="_blank">Text Munger problem on RubyQuiz</a>, and building an <a href="https://github.com/kylefdoherty/image-editor" target="_blank">image editor command line app</a>, I had to work a lot with files and directories and realized I didn’t have a great handle on them.  To remedy this I did what I always do, a bunch of reading, practice problems, and put it all down in my notebook.  There still is a lot for me to learn but I think this lays a good foundation for understanding and working with files in Ruby.</p>

<h2>IO Class</h2>


<p>The IO class is the parent class for the File class and thus is where it gets a ton of its methods such as readlines and readline.  IO stands for input/output, specifically input/output streams which are sequences of data that allow you to do things like play sound on your speakers and print output to a screen.  The IO class allows you to initialize streams and do things with them.</p>

<h2>Standard Output, Input, and Error</h2>


<p>STDOUT, STDIN, and STDERR are ruby constants that are IO objects pointing to your programs output, input, and error streams.  You can access these streams through the terminal without opening any files.</p>

<p>When you do something like call puts, output is sent to the IO object that STDOUT points to.  Conversely when you call get, input is captured by the IO object that STDIN points to.</p>

<p><strong>Further Reading:</strong> <a href="https://rubymonk.com/learning/books/1-ruby-primer/chapters/42-introduction-to-i-o/lessons/89-streams" target="_blank"><a href="https://rubymonk.com/learning/books/1-ruby-primer/chapters/42-introduction-to-i-o/lessons/89-streams">https://rubymonk.com/learning/books/1-ruby-primer/chapters/42-introduction-to-i-o/lessons/89-streams</a></a></p>

<h2>File Class</h2>


<p>According to the <a href="http://ruby-doc.org/core-1.9.3/File.html" target="_blank">ruby doc</a>, a File is an abstraction of any file object accessible by the program and is closely associated with the class IO (it’s a subclass of IO).</p>

<p>You use the File class to create files, read them, and write to them.  There are various modes that can be given to the File class telling it what its behaviour is i.e. can read it, can write to it, can do both, etc.  These modes are inherited from the IO class and are listed below.</p>

<p></style></p>

<h3>Modes</h3>


<table style="width:700px">
    <tr>
      <th>Mode</th>
      <th>Meaning</th>      
    </tr>
    <tr>
      <td>"r"</td>
      <td>Read-only, starts at beginning of file  (default mode).</td>      
     </tr>
    <tr>
      <td>"r+"</td>
      <td>Read-write, starts at beginning of file.</td>     
    </tr>
    <tr>
      <td>"w"</td>
      <td>Write-only, truncates existing file to zero length or creates a new file for writing.</td>        
    </tr>
    <tr>
      <td>"w+"</td>
      <td>Read-write, truncates existing file to zero length or creates a new file for reading and writing.</td>        
    </tr>
    <tr>
      <td>"a"</td>
      <td>Write-only, starts at end of file if file exists, otherwise creates a new file for writing.</td>      
    </tr>
    <tr>
      <td>"a+"</td>
      <td>Read-write, starts at end of file if file exists, otherwise creates a new file for reading and writing.</td>      
    </tr>
    <tr>
      <td>"b"</td>
      <td>Binary file mode (may appear with any of the key letters listed above). Suppresses EOL <-> CRLF conversion on Windows. And sets external encoding to ASCII-8BIT unless explicitly specified.</td>     
    </tr>
    <tr>
      <td>"t"</td>
      <td>Text file mode (may appear with any of the key letters listed above except "b").</td>     
    </tr>
</table>


<br>




<h2>Writing to a File</h2>


<p>```ruby Writing to a File
file = File.open(“text.txt”, “w”)
file.puts “Hello from #{$0}”
file.close</p>

<h1>=> writes “Hello from io.rb” to the file text.txt</h1>

<p>```
On the first line I’m calling the <code>.open</code> method on the File class and passing it the file text.txt and the mode I want the file to use, “w”.  Next I’m using the <code>.puts</code> method to write to the file and passing it the text I want it to write to the file.  Note, that If we didn’t have a file text.txt in our directory, this script would have created it.</p>

<h3>Using Block Notation</h3>


<p><code>ruby Writing to a File with Block Notation
File.open(“text.txt”,”w”){|file| file.puts”Hola from $0”}
</code></p>

<p>Note that when passing a block to File you don’t have to close it because when the block is exited it closes the File for you.</p>

<h2>Reading a File</h2>


<p><code>ruby Reading from a File
file = File.open(“lib/I_have_a_dream.txt”)
contents = file.read
puts contents
file.close
</code>
This is pretty simple.  We’re opening the file we want to read with the <code>.open</code> method and storing it in the file variable.  Then we call the <code>.read</code> method on file and store it in contents and then puts the contents.
<code>.read</code> starts reading from the place the last <code>.read</code> operation stopped. Here we’ve read the entire file and thus if below <code>puts contents</code> we tried to read the file again there would be nothing to read because we&rsquo;re at the end of the file.</p>

<h3>Reading a File Block Notation</h3>


<p><code>ruby Reading from a File Block Notation
contents = File.open(“lib/I_have_a_dream.txt”, “r”){|file| file.read}
puts contents
</code></p>

<h2>Closing Files</h2>


<p>If you open a file make sure you close it, unless you’re passing File a block and then the block will close the file when it ends.</p>

<p>The reason you need to close files is it forces a “flush”, which means it pushes the data-to-be-written to where you want it to be.  This frees up memory for the rest of your program and ensures the file is available for other processes to access.</p>

<p><strong>Further Reading:</strong> <a href="http://ruby.bastardsbook.com/chapters/io/" target="_blank"><a href="http://ruby.bastardsbook.com/chapters/io/">http://ruby.bastardsbook.com/chapters/io/</a></a></p>

<h2>More File Methods</h2>


<p>We’ve already seen some file methods like .open and .close but here are some more useful ones. Checkout the ruby doc for File and IO for the rest of them.</p>

<h3>.readlines & .readline</h3>


<p>These two methods can be very handy when you want to read one line at a time.  This would be useful for instance if you are reading a comma delimited file.</p>

<h3>.readlines</h3>


<p> &ndash; takes in all the content of the file and stores each line as an element of an array.  From here you can iterate over each line using each.</p>

<p><code>ruby Using Readlines
File.open(read_file).readlines.each do |line|
puts line
end
</code></p>

<h3>.readline</h3>


<p> &ndash; is a bit different in it only reads one line at a time and thus you need to keep advancing it forward in the file, which can be done with a <code>while</code> or <code>until</code> method.</p>

<p><code>ruby Using Readline
file = File.open("lib/blood_sweat_tears.txt")
until file.eof?
   line = file.readline
   puts line
end
file.close
</code></p>

<p>The reason you would want to <code>.readline</code> vs <code>.readlines</code> is because <code>.readlines</code> loads the entire contents of the file into memory.  For a small script working with small files this isn’t a problem but if you are using large files and/or have multiple users this is bad.</p>

<h3>.exists?</h3>


<p> &ndash; checks for the existence of the file.</p>

<p>```ruby
if File.exists?(“file_name”)</p>

<pre><code>#do something 
</code></pre>

<p>end
```</p>

<h3>.absolute_path</h3>


<p> &ndash; gets the absolute path for the.</p>

<p>``` ruby
puts File.absolute_path(&ldquo;lib/blood_sweat_tears.txt&rdquo;)</p>

<h1>=> “/Users/kyledoherty/Dropbox/Ruby/learn_to_program/working_w_files/lib/blood_sweat_tears.txt”</h1>

<p>```</p>

<h3>.basename</h3>


<p> &ndash; gives you just the filename.</p>

<p>``` ruby
puts File.basename(“/Users/kyledoherty/Dropbox/Ruby/learn_to_program/working_w_files/lib/blood_sweat_tears.txt”)</p>

<h1>=> “blood_sweat_tears.txt’</h1>

<p>```</p>

<h3>.directory?</h3>


<p> &ndash; returns true if the string passed to it is a directory.</p>

<p>``` ruby
Dir.open(Dir.pwd).each do |filename|</p>

<pre><code>next if File.directory? filename 
</code></pre>

<p>end
```</p>

<h2>Dir Class</h2>


<p>The Directory class allows you to work with driectories as you’d expect.  Most of the methods you can use on the directory class are the same as the commands you use in the console.</p>

<h2>Some Dir Methods</h2>




<h3>.pwd</h3>


<p> &ndash; tells you what directory you’re in.</p>

<p>```ruby
puts Dir.pwd</p>

<h1>=> &ldquo;/Users/kyledoherty/Dropbox/Ruby/image_edit&rdquo;</h1>

<p>```</p>

<h3>.chdir</h3>


<p> &ndash;  allows you to change to a new directory.</p>

<p>```ruby
Dir.chdir(“"/Users/kyledoherty/Dropbox/Ruby/rubyquiz”</p>

<h1>=> 0</h1>

<p>```</p>

<h3>.mkdir</h3>


<p> &ndash; makes a new directory named the string it is passed.</p>

<p>```ruby
Dir.mkdir(“stuff”)</p>

<h1>=> 0</h1>

<p>```</p>

<h3>.rmdir</h3>


<p> &ndash; removes an empty directory but throws an error if it contains files.  To remove a directory with files you must use the FileUtils module.</p>

<p>```ruby
Dir.rmdir(“stuff”)</p>

<h1>=> 0</h1>

<p>```</p>

<h2>Accessing Directory Content</h2>


<p>There are two ways to grab content from directories, using .entries and .glob.</p>

<h3>.entries</h3>


<p> &ndash;  returns an array with every single entry inside the diretory including “.” and hidden files.</p>

<p>```ruby
Dir.entries(“../rubyquiz”)</p>

<h1>=> [&ldquo;.&rdquo;, &ldquo;..&rdquo;, &ldquo;.DS_Store&rdquo;, &ldquo;.git&rdquo;, &ldquo;README&rdquo;, &ldquo;text_munger_76&rdquo;]</h1>

<p>```</p>

<h3>.glob</h3>


<p> &ndash; can be passed a directory name or pattern such as <code>*.txt</code> and returns an array of just the visible files</p>

<p>```ruby
Dir.entries(“*”)</p>

<h1>=> [&ldquo;README&rdquo;, &ldquo;text_munger_76&rdquo;]</h1>

<p>```
Gives us the files in the current directory.</p>

<p>```ruby
Dir.entries(“<em>*/</em>.txt”)</p>

<h1>=> [&ldquo;text_munger_76/lib/blood_sweat_tears.txt&rdquo;, &ldquo;text_munger_76/lib/gettysburg_address.txt&rdquo;, &ldquo;text_munger_76/lib/I_have_a_dream.txt&rdquo;, &ldquo;text_munger_76/lib/pearl_harbor_address.txt&rdquo;, &ldquo;text_munger_76/lib/strength_and_decency.txt&rdquo;]</h1>

<p>```
Here we use <code><em>*/</em>.txt</code> to search the current directory and all it’s sub directories for any .txt files using a recursive search and passing it the pattern .txt.</p>

<h2>FileUtils Module</h2>


<p>I’m not going to go into FileUtils too much but it allows more control over files and mimics a lot of the command line commands and flags you can use such as <code>rm -rf</code> for removing directories that contain files.</p>

<h2>Some Methods</h2>




<h3>.mkdir</h3>


<p> &ndash; makes a directory</p>

<h3>.touch</h3>


<p> &ndash; makes a file</p>

<h3>.rm_rf</h3>


<p> &ndash; removes a directory whether it contains other files and directories or not</p>

<p>```ruby
if File.exists?(“file_name”)
FileUtils.rm_rf(“file_name”)
end</p>

<p>```</p>

<p>Note: you need to require FileUtils in your files with <code>require ‘fileutils’</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building an RSS Twitter Bot]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/02/17/building-an-rss-twitter-bot/"/>
    <updated>2014-02-17T13:07:55+01:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/02/17/building-an-rss-twitter-bot</id>
    <content type="html"><![CDATA[<p>Last night after finishing my Ruby Notes on the File class I decided I wanted to try building an RSS Twitter bot.  I’d gotten the idea a week or so ago while reading some articles about my Alma Mater’s Top 10 Basketball team, the SDSU Aztecs in case you’re wondering, and thinking it would be cool to create an app that I could plug RSS feeds into and it’d tweet out the updates to the RSS feeds.  This way I’d always be up to date with sports news about my Aztecs and it’d be a good simple project for me to tackle.</p>

<p><img class="center" src="/images/Twitter_Application_Management.png" title="&lsquo;SDSUSports Twitter App&rsquo; &lsquo;An image my Twitter bot app.&rsquo;" ></p>

<h2>Reading RSS Feeds</h2>


<p>So I looked into how to read RSS feeds and found the RSS module and the Simple RSS gem.  I played around with both and decided to use SimpleRSS.  To keep things simple my goal was to plug in two feeds, the <a href="http://www.utsandiego.com/news/sports/sdsu-aztecs/" target="_blank">UT San Diego’s SDSU Sports section</a> and the <a href="www.youtube.com/user/goaztecscom‎" target="_blank">SDSU Athletics Youtube Channel</a> and tweet out the feeds.</p>

<p>Here is what the Twitter Account looked like after I got this to work.</p>

<p><img class="center" src="/images/Cut_Down_Nets<strong>_SDSUsports</strong>on_Twitter.png" title="&lsquo;SDSUSports Twitter Account&rsquo; &lsquo;An image of the twitter account I created for my twitter bot to post to.&rsquo;" ></p>

<h2>Getting Off Track</h2>


<p>It didn’t take long to get the basics of taking in a feed and parsing it to remove just the title and the link but after that I got a bit off track.  I spent a bunch of time on how to remove the date that was included at the end of every GoAztecs.com Youtube video title because I decided I didn’t want this in the tweets.  Here’s an example title so you know what I’m talking about, “SDSU MEN&rsquo;S HOOPS: STEVE FISHER POSTGAME vs. AIR FORCE &ndash; 2/15/14.”  This turned out to be good practice with strings and arrays, but in hindsight this was a dumb thing to do since this is for one specific feed and thus can’t be reused.  What I should have been focusing on was sorting feeds as either an RSS feed or Atom feed, because that dictates what methods you use to parse the feed.</p>

<h2>Sort Them Feeds</h2>


<p>Once I finished removing the dates from the video titles I went about sorting whether the feeds were RSS or Atom.  I knew that having “feed” and “rss” in the URL was probably not the standard for telling if a feed was RSS or Atom but I just wanted to get this working for these two feeds and improve my code later.</p>

<p>```ruby Sorting Feeds
def feed_sorter
feed_num = 0</p>

<pre><code>@feeds.each do |feed|
    feed_num +=1
    case 
    when feed.include?('feed')
        @sorted_feeds[feed_num] = [feed, 'atom']
    when feed.include?('rss')
        @sorted_feeds[feed_num] = [feed, 'rss']
    else invalid feed
    end 
end 
</code></pre>

<p>end
```
You can see that I’m checking if “RSS” or “Atom” is in the URL and then sticking then storing them in an array inside a hash.  Again I knew I’d have to change this down the road, especially if I start using a database for persistence but this gets the job done for my two feeds.</p>

<h2>Putting it All Together</h2>


<p>From here all I wanted to clean up my code and put it in a class.  So I created a RssParser class, which probably should be renamed to FeedParser, and created the methods initialize, run, feed_sorter, feed_parser, and send_tweet. Then I added the Twitter Gem and my keys and tokens and boom it worked.</p>

<p>```ruby RssParser
require &lsquo;simple-rss&rsquo;
require &lsquo;open-uri&rsquo;
require &lsquo;twitter&rsquo;</p>

<p>class RssParser</p>

<pre><code>def initialize(*feeds)
    @feeds = feeds 
    @sorted_feeds = {}
    @tweet = ''

    @client = Twitter::REST::Client.new do |config|
      config.consumer_key        = "Consumer_Key"
      config.consumer_secret     = "Consumer_Secret"
      config.access_token        = "Access_Token"
      config.access_token_secret = "Secret_Token"
    end
end 


def run
    feed_sorter
    feed_parser
end 
</code></pre>

<h1>method to sort if feeds are atom or rss feed</h1>

<pre><code>def feed_sorter
    feed_num = 0 

    @feeds.each do |feed|
        feed_num +=1
        case 
        when feed.include?('feed')
            @sorted_feeds[feed_num] = [feed, 'atom']
        when feed.include?('rss')
            @sorted_feeds[feed_num] = [feed, 'rss']
        else invalid feed
        end 
    end 
end 
</code></pre>

<h1>method to parse feed to retrieve the title and link, and to clean up youtube titles for the goaztecscom yoututbe titles</h1>

<pre><code>def feed_parser 

    @sorted_feeds.each do |k,v|

        case 
        when v[1] == "rss"
            rss = SimpleRSS.parse open(v[0])
            rss.channel.items.each do |story|
                @tweet = "#{story.title} #{story.link}"
                send_tweet
            sleep(30)
            end 
        when v[1] == "atom"
            rss = SimpleRSS.parse open(v[0])
            rss.entries.each do |vid|
                title = vid.media_title.split('-')
                link = vid.link

                title.delete_at(-1)
                if title.length == 2
                    message = "#{title[0].strip} #{title[1].strip}"
                    @tweet = "#{message} #{link}" 
                    send_tweet

                else 
                    message = "#{title[0].strip}"
                    @tweet = "#{message} #{link}"
                    send_tweet
                end 
                sleep(20)
            end 
        end
    end 

end 

def send_tweet
    @client.update(@tweet)
    puts "Sent tweet: #{@tweet}"
end 
</code></pre>

<p>end</p>

<p>parser = RssParser.new(&lsquo;<a href="http://gdata.youtube.com/feeds/api/users/goaztecscom/uploads">http://gdata.youtube.com/feeds/api/users/goaztecscom/uploads</a>&rsquo;, &lsquo;<a href="http://www.utsandiego.com/rss/headlines/sports/sdsu-aztecs/">http://www.utsandiego.com/rss/headlines/sports/sdsu-aztecs/</a>&rsquo;)
parser.run
```</p>

<h2>Next Steps</h2>


<p>As mentioned there are some flaws with my code so I need to begin refactoring what I’ve got so far.  Below are my to-dos in order to improve this code so it will work with multiple feeds.</p>

<ol>
    <li>This morning when I tried to rerun the code for some reason it threw an error that the youtube feed is a poorly formatted feed, so that will be the first thing to figure out.</li>
    <li>Store twitter keys in a yaml file and gitignore</li>
    <li>Figure out a better, more standard way of sorting the feeds</li>
    <li>Remove the case statement that changes the GoAztecs youtube titles</li> 
    <li>Add a check for whether or not the tweets are 140 chars.  If not reduce the title by n - 143 and append '...' to the truncated title and then tweet the title + the link</li>
    <li>Add a database with CRUD operations so I can store more feeds</li>
</ol>




<h2>Down the Road</h2>


<p>Here are some things I&rsquo;d like to do eventually with this little project.</p>

<ol>
    <li>Turn it into a sinatra app (good way to learn Sinatra)</li>
    <li>Add a URL shortener or roll my own</li> 
    <li>Make it so a user can sign in and create their own RSS Twitter bot by providing their API keys</li>
</ol>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Notes - Control Flow]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/02/07/ruby-notes-flow-control/"/>
    <updated>2014-02-07T10:52:33+01:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/02/07/ruby-notes-flow-control</id>
    <content type="html"><![CDATA[<p>I’m 4 weeks into my 25 hours a week of Ruby self-study (I work part time right now otherwise it’d be 40+ hours) and just completed
<a href="http://www.codecademy.com/tracks/ruby" target="_blank">Codecademy’s Ruby track.</a>  Finishing was great but I felt I&rsquo;d  only scratched the surface of Ruby and programming in general.  To supplement my minimal Ruby knowledge I decided to begin additional research and create study notes and do practice problems for each topic covered by Codecadmny, such as control flow, arrays, blocks, etc.  This has already proven a success as I’ve seen a marked difference in my confidence and coding ability after completing notes for Control Flow and Arrays.</p>

<p>Now I’ve decided to turn my notes and practice problems into blog posts because:</p>

<ol> 
  <li>Hopefully it will be helpful to other people learning Ruby</li>
  <li>It forces me to read through my notes and practice problems again</li>
  <li>It requires rewriting my notes in way that others can understand thus further driving the concepts home for me</li>
  <li>Hopefully I’ll get feedback on my notes and practice problems (hint hint)</li>
</ol>




<h2>Control Flow</h2>


<p>Control flow allows you to control how your ruby script executes based on conditions.  For example, <code>if</code> condition A is met then do B OR <code>unless</code> B happens do A.</p>

<h2>If Statement</h2>


<p>An if statement tells the program what to do if a condition is met. That is, if the conditional that comes after <code>if</code> is true then execute the following code. If it evaluates to false, it doesn’t execute.</p>

<p>```ruby Example 1 &ndash; If Statements
money = true</p>

<p>if money
  puts “You have money.”
end
```</p>

<p>This if statement is saying if the variable money is true, puts the message “You have money.”  In this case if money were set to false, nothing will puts to the screen.</p>

<p><code>ruby Example 2 - If Statements
if 2 &lt; 3
  puts “2 is less than 3”
end
</code></p>

<p>Since 2 is less than 3 this if statement evaluates to true and thus puts’ “2 is less than 3”.  If we had typed <code>if 2 > 3</code>, puts would not have been executed and ‘nil’ would have been returned because the if statement would have evaluated to false.</p>

<h2>If/Else Statement</h2>


<p>Adding an else into the if statement essentially creates a default i.e. in the event whatever comes after <code>if</code> is false then do this.</p>

<p>```ruby Example &ndash; If/Else Statement
password = 12345678</p>

<p>if  password.length >= 8</p>

<pre><code>puts “your password is long enough”
</code></pre>

<p>else</p>

<pre><code>puts “your password is too short”
</code></pre>

<p>end
```</p>

<h2>If/Elsif/Else</h2>


<p>Using an elsif allows for multiple conditions to be added to the if statement.  In this way we can essentially add multiple if statements to check for many different possible conditions.</p>

<p>```ruby Example &ndash; If/Elsif/Else Statement
city = “San Francisco”</p>

<p>if city == “New York”
  puts “Jets &amp; Giants”
elsif city == “Denver”
  puts “Broncos”
elsif city == “San Francisco”
  puts “49ers”
else
  puts “Hmm we don’t know what NFL team that city has.”
end
```</p>

<p>If the variable <code>city</code> is set to any of the cities in our If/Else statement, the program will puts what NFL team that city has.  If <code>city</code> is not set to one of those cities then the program puts the default message, &ldquo;Hmm we don’t know what NFL team that city has.”</p>

<h2>Unless</h2>


<p>Unless is the opposite of an if statement.  An if statement only executes if the conditional is true, conversely unless only executes if the conditional is false.  It’s good practice to use unless instead of using <code>if !=</code> (if not equal to) since <code>if !=</code> can be a bit confusing.</p>

<p>The following if statement can be replaced with an unless statement.</p>

<p>```ruby Example of Bad If Statement
puts &ldquo;Give us a message.&rdquo;
message = gets.chomp</p>

<p>if message != “”
  puts “#{message}
end
```</p>

<p>By using unless this piece of code becomes much more readable.</p>

<p>```ruby Example of When to Use Unless
puts &ldquo;Give us a message.&rdquo;
message = gets.chomp</p>

<p>unless message.empty?
  puts &ldquo;#{message}&rdquo;
end
```</p>

<p>Another good use case for Unless is to use them in a single line like so:</p>

<p>```ruby Example 2 &ndash; When to Use Unless
milk = false</p>

<p>puts “We’re out of milk.” unless milk</p>

<h1>=> We’re out of milk</h1>

<p>```</p>

<p>Here we’re saying only puts we’re out of milk if the milk variable is set to false.  Since in this case milk is set to false then the message would be shown to the screen.</p>

<p>One more example:</p>

<p><code>ruby Example 3 - When to Use Unless
i += 1 unless i &gt; 10
</code></p>

<p>Here <code>i</code> is being increased by 1 unless it is more than 10.</p>

<h3>Unless Best Practices</h3>


<p>There are some best practices you should follow when using unless to ensure you don’t confuse people or yourself.  These aren’t universal, especially considering the Codecademy section on control flow doesn’t follow all of them, but after doing some research I’ve found these best practices given several places such as <a href="https://www.codeschool.com/courses/ruby-bits" target="_blank">Code School’s Ruby Code Bits course</a> and a blog post on the 37Signals blog called <a href="http://signalvnoise.com/posts/2699-making-sense-with-rubys-unless" target="_blank">&ldquo;Making Sense with Ruby’s ‘Unless’”</a>.</p>

<ol>
    <li>Don’t use else with unless.  Codeacademy does this in some of their examples with unless and they aren’t all that confusing but they aren’t that straightforward either. It’s probably better to use an if statement if you want to use else.</li>
    <li>Avoid using more than a single logical condition.  For example, doing things like <code>unless a && b</code> can become confusing fast.</li>
    <li>No double negatives.  Unless is already a negative so don’t add in a != to make it a double negative...that’s just bad english.</li>
</ol>




<h2>Inline Conditionals</h2>


<p>As mentioned when discussing unless, sometimes it’s best to write an if or unless statement on 1 line.  Here are some examples:</p>

<p><code>ruby Multy Line If Statement
if zipcode &lt; 5
  fail “zipcode too short”
end
</code></p>

<p>Can become:</p>

<p><code>ruby Single Line If Statement
fail “zipcode too short” if zipcode.length &lt; 5
</code></p>

<p>Some more examples:</p>

<p><code>ruby Single Line If Statement
puts “Input your name:” if name.empty?
</code>
<code>ruby Single Line Unless Statement
puts fail “no username set” unless username
</code></p>

<h2>The Ruby Ternary Operator</h2>


<p>The ternary operator is another way to write an if else statement.  The word ternary means consisting of or involving three. The ruby ternary operator consists of the following 3 parts:</p>

<p>condition ? value if true : value if false</p>

<p>In this case the ? is analogous to the word THEN and the : is analogous to OR.  What a ternary operator is saying is if the condition evaluates to true THEN return the value if true OR if the condition evaluates to false, output the value if false.</p>

<p>This may not make sense 100% but an example should shore that up.</p>

<p>```ruby Ternary Operator Example
milk = true</p>

<p>puts milk ? “We have milk” : “We don’t have milk”
```</p>

<p>Here the ternary operator is saying if milk = true THEN puts “We have milk” OR if milk = false, puts “We don’t have milk.”</p>

<p>For simple if/else statements Ruby’s ternary operator can be a nice thing to use.</p>

<h2>Case Statements</h2>


<p>Sometimes using an if/else statement can be too wordy and that is when you need a case statement.  Instead of saying if, elsif, else, you simply use when, which is saying, when the conditional is true, run this code.</p>

<p>Here’s an example:</p>

<p>```ruby Case statement example
animal = “dog”</p>

<p>case animal
when animal == “cat”
  puts “Meow!”
when animal == “parrot”
  puts “Polly want a cracker!”
when animal == “dog”
  puts “Woof!”
else
  puts “What animal is that?”
end
```</p>

<p>Further reading on sase statements try &ndash; <a href="http://www.skorks.com/2009/08/how-a-ruby-case-statement-works-and-what-you-can-do-with-it" target="_blank">How A Ruby Case Statement Works and What You Can Do With It</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Procs are Amazing!]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/01/30/ruby-procs-are-amazing/"/>
    <updated>2014-01-30T15:12:44+01:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/01/30/ruby-procs-are-amazing</id>
    <content type="html"><![CDATA[<p>I just got through the <a href="http://www.codecademy.com/courses/ruby-beginner-en-L3ZCI/1/1?curriculum_id=5059f8619189a5000201fbcb" target="_blank">Codeacademy Procs section</a> and got so excited I tweeted about them and emailed my girlfriend explaining what Procs are and why they’re so cool&hellip;bad I know.  Luckily she works in finance and is a total excel geek so she can empathize and won’t think I’m a complete weirdo.</p>

<p><img class="center" src="/images/proc_tweet.png" title="&lsquo;Proc Tweet&rsquo; &lsquo;Tweet about how cool Ruby Procs are&rsquo;" ></p>

<p><img class="center" src="/images/proc_email.png" title="&lsquo;Proc Email&rsquo; &lsquo;Email about how cool Ruby Procs are&rsquo;" ></p>

<p>Since I already tweeted and sent an email about Procs I figured I’d post about them to round things out.</p>

<h2>Why Procs are Cool</h2>


<p>Procs allow you to save a block of code, something like <code>{ |x| x *3 }</code> which is saying take whatever I give you (x) and multiply it by 3.  What you can then do with this is pass it to methods.</p>

<p>So for example, I have an array of people&rsquo;s heights, like so:</p>

<p><code>ruby
array = [4.5, 5, 6, 3.5, 3]
</code></p>

<p>And I want to get all the heights that are above 4 feet tall because that&rsquo;s how tall you have to be to ride the ride&hellip;le duh.</p>

<p>I could write some long method called <code>rubyover_4_feet</code> where I pass it the array and then it returns the heights that are above 4 feet tall.  But that would require 9 lines of code&hellip;maybe less but that&rsquo;s how many lines it took me.</p>

<p>``` ruby
def over_4_feet(array)</p>

<pre><code>new_arr = []
array.each do |i|
    unless i &lt; 4
        new_arr &lt;&lt; i
    end 
end 
return new_arr
</code></pre>

<p>end
```</p>

<p>Instead I can call the method <code>.select</code> on the array and pass it a Proc that tells it to only select heights that are taller than 4 feet.</p>

<p>Below is a proc that checks for being over 4 feet tall. Then I just pass that proc to the <code>.select</code> method telling it to only &ldquo;select&rdquo; heights over 4 feet.</p>

<p>``` ruby
over_4_feet = Proc.new { |x| x >= 4 }</p>

<p>array.select(&amp;over_4_feet)
```</p>

<p>So what took me 9 lines of code I did in 1, since passing the Proc to select is the same as calling the over_4_feet method.</p>

<h3>AMAZING!!!</h3>


<p><a href="http://gifsoup.com/view/2169429/nets-fan.html" target="_blank"><img src="http://stream1.gifsoup.com/view3/2169429/nets-fan-o.gif" border="0"/></a><br /><a href="http://gifsoup.com" title="GIFSoup" target="_blank"></a></p>
]]></content>
  </entry>
  
</feed>
