<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Learning Programming <br> & <br> Stuff]]></title>
  <link href="http://kylefdoherty.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://kylefdoherty.github.io/"/>
  <updated>2014-06-26T23:34:05-04:00</updated>
  <id>http://kylefdoherty.github.io/</id>
  <author>
    <name><![CDATA[Kyle Doherty]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Close Reading Code]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/06/26/close-reading-code/"/>
    <updated>2014-06-26T08:38:53-04:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/06/26/close-reading-code</id>
    <content type="html"><![CDATA[<h2>TL;DR</h2>

<p><strong>If you’re a rookie programmer like me your programming level is here:</strong></p>

<br>


<p><img class="center" src="http://kylefdoherty.github.io/images/baby.jpg">
<strong>And you want to be at this level:</strong></p>

<br>


<p><img class="center" src="http://kylefdoherty.github.io/images/ironic.jpg"></p>

<p><strong>Use <a href="http://writingcenter.fas.harvard.edu/pages/how-do-close-reading" target="_blank">close reading techniques</a> to level up your coding skills.</strong></p>

<h2>Learning to Code Well == Learning to Write Well</h2>

<p>When I decided I wanted to become a programmer back in January I spent a lot of time thinking about the act of learning and what were the best ways to learn to program.  This meant I also spent a lot of time researching the topic on the interwebs and the advice I kept coming across was, <strong>“you need to write a lot of code and read even more.”</strong> This is when I started forcing myself to read other people’s code.</p>

<p>Then at the start of Flatiron School, Avi (the dean) described our coding ability one day as “Baby Talk.”  I thought this was a fair metaphor, but it also made me think about how learning to code well is like learning to write well.  One of the best ways to improve your writing skills is to use a technique called close reading, which transfers nicely to learning to program.</p>

<h2>WTF is Close Reading</h2>

<p><a href="http://writingcenter.fas.harvard.edu/pages/how-do-close-reading" target="_blank">Close reading</a> is defined by <a href="http://en.wikipedia.org/wiki/Close_reading"target="_blank">wikipedia</a> as, &ldquo;the careful, sustained interpretation of a brief passage of text. Such a reading places great emphasis on the single particular over the general, paying close attention to individual words, syntax, and the order in which sentences and ideas unfold as they are read.&rdquo;</p>

<p><img class="center" src="http://kylefdoherty.github.io/images/close_reading.JPG"></p>

<p>Often close reading is used to better understand an academic text so you can compose an essay about it.  However, it can also be used to improve your reading and writing skills, because you’re paying close attention to vocabulary, sentence structure, style, etc. and begin to incorporate this into your own writing. This technique was especially helpful for me while studying in Chile and having to read academic papers in Spanish on topics such as the 1973 Arab–Israeli War and Business Operations.  At the time my Spanish was at a 7th grade level at best and these papers were 12 grade plus.  Thus, I spent a ton of time meticulously going through my assigned readings with pen, highlighter and Google to breakdown complex sentences, lookup words I didn’t know, and take notes detailed notes. This paid huge dividends down the road, helping me level up on my Spanish reading and writing skills&hellip;not that I still have them, but hey I did at one time.</p>

<h2>How to Close Read Code</h2>

<p>The way I close read code is similar to how I read an academic paper, except instead of paper and pen, I use my text editor and IRB.  While I’m reading through complex code I write comments above or next to each line, explaining in detail what is going on. And if I don&rsquo;t understand what&rsquo;s going on I just look it up in the Doc, throw it in IRB or use Pry, or I go to the Google.  With one or a combo of these you should be able to figure out what&rsquo;s goign on.</p>

<p>Here&rsquo;s an example of my detailed comments for a section of a Student class from a recent Flatiron lab:</p>

<p>``` ruby
class Student
  #setting the attributes of the student class to a class instance variable
  ATTRIBUTES = {</p>

<pre><code>:id =&gt; "INTEGER PRIMARY KEY",
:name =&gt; "TEXT",
:tagline =&gt; "TEXT",
:github =&gt;  "TEXT",
:twitter =&gt;  "TEXT",
:blog_url =&gt;  "TEXT",
:image_url  =&gt; "TEXT",
:biography =&gt;  "TEXT"
</code></pre>

<p>  }</p>

<p>  # ATTRIBUTES.keys.each do |attribute|
  #   attr_accessor attribute
  # end</p>

<p>  #creating the attr_accessor by taking the keys from the ATTRIBUTES hash
  #which returns an array and sending that array to the attr_accessor
  #method with the splat operator.  This &lsquo;explodes&rsquo; the array into individual
  #elements which are passed to the method
  attr_accessor *ATTRIBUTES.keys</p>

<p>  #creates an empty students table by creating a SQL statment
  #and assigning it to a variable and then passing that sql var to
  #DB[:conn].execute. Inside the CREATE TABLE block
  #the method .schema_defininition is being called in order to insert the
  #correct columns in the table (see schema definition below for explination)
  def self.create_table</p>

<pre><code>sql = &lt;&lt;-SQL
CREATE TABLE IF NOT EXISTS #{self.table_name} (
    #{schema_definition}               
    )
SQL
DB[:conn].execute(sql)
</code></pre>

<p>  end
```</p>

<p>(All the <a href="https://gist.github.com/kylefdoherty/3f16da77103ff13b4c4d" target="_blank">code</a> for the Student class)</p>

<p>As you can see I try to explain exactly what is going on in detail so I&rsquo;m aboslutely sure what&rsquo;s going on.</p>

<h2>Use the Code You Read</h2>

<p>After you’ve read through and commented out what each line of code is doing, don’t stop there. I like to play with what I&rsquo;ve learned in IRB to help me internalize it or rebuild it on my own.</p>

<p>For example, a week before Flatiron School started I learned a bit of Javascript and decided to try building a countdown to the first day of school. Google led me to this <a href"http://blog.smalldo.gs/2013/12/create-simple-countdown/" target="_blank">tutorial</a> which I disected line by line with comments for what was goign on.</p>

<p>```javascript</p>

<h1 id='countdown-holder'>Coutndown goes here!</h1>


<p></p>

<!-- creating an h1 tag wtih the id 'countdown-holder' 
so it can be targeted by JS with the .getElementById method-->




<script src="http://smalldo.gs/js/countdown.min.js"></script>


<p></p>

<p> <!-- including the countdown.js script--></p>

<script>
  var clock = document.getElementById("countdown-holder") 
  
  //setting a variable named clock to 'document.getElementById' which is the method .getElementById being called on the 'document' (the html file). The id we're telling it to get is "countdown-holder"
  
  , targetDate = new Date(2014,05,02,09,00,00); 
  
  //setting a var named targetDate to a new date object with the date of June 2, 2015 at 9:00 am
 
  clock.innerHTML = countdown(targetDate).toString();
  
  // calling the .innerHTML method on clock to replace the h1 text with the countdown targetDate converted to a string
  
  setInterval(function(){
    clock.innerHTML = countdown(targetDate).toString();
  }), 1000;
  
  // the setInterval method executes a function over and over again, at specified time intervals. Here we're resetting the clock.innerHTML variable every second (1000 milliseconds in a second)
  
</script>


<p>```</p>

<p>After getting a good understanding of what was going on, I tried coding it by myself and got this:</p>

<p>```javascript</p>

<script src="http://smalldo.gs/js/countdown.min.js"></script>


<p></p>

<pre><code>&lt;h1&gt;Flatiron Ruby005 Countdown&lt;/h1&gt;
&lt;h2 id='countdown-holder'&gt;Countdown goes here!&lt;/h2&gt; 
</code></pre>

<script>
  var endDate = new Date(2014,05,02,09,00,00);
  var timeSpan = countdown(null, endDate );
  var clock = document.getElementById("countdown-holder");
 
  var timer = setInterval(function() {
    console.log(timeSpan = countdown(null, endDate ));
    if(timeSpan < 1)
    {
      clearInterval(timer); // need to find a way to set timespan at the global level so even after someone refreshes the page the timer doesn't run and the new clock text appears
 
    }
    console.log(clock.innerHTML = countdown(null, endDate ).toString());
  },1000);
</script>


<p>```</p>

<p>This got me close to a working countdown script but wasn&rsquo;t quite working.  With a little help from <a href="https://twitter.com/ttsiege" target="_blank">Tristen</a> I was able to refactor my code and get it working.</p>

<p>```javascript</p>

<script src="http://smalldo.gs/js/countdown.min.js"></script>


<p></p>

<p>  <h1>Flatiron Ruby005 Countdown</h1>
  <h2 id='countdown-holder'>Countdown goes here!</h2></p>

<script>
  
  var timer = setInterval(function() {
    var endDate = new Date(2014,05,02,09,00,00),
      clock = document.getElementById("countdown-holder"),
      gif = document.getElementById("gif"),
      timeSpan = countdown(null, endDate);
 
    // breaks recursion
    if(timeSpan.value < 1)
    {
      clearInterval(timer); // need to find a way to set timespan at the global level so even after someone refreshes the page the timer doesn't run and the new clock text appears
      return clock.innerHTML = "Flatiron Ruby005 Has Begun!" 
    }
 
    clock.innerHTML = timeSpan.toString();
 
  },1000);
 
  
</script>


<p>```
Close reading the original countdown code and then recoding it myself helped me grasp on a much deeper level how to declare JS variables, JS functions &amp; function scope, and JS conventions, such as declaring multiple variables at once.</p>

<h2>Final Thoughts</h2>

<p>I know for me forcing myself to take the time to close read code is something I still struggle with, but I can honestly say this has helped me improve my code substantially. If you take the time to read code line by line, add detailed comments explaining what&rsquo;s going on, and then use it, it will pay off huge down the road.</p>

<h2>Resources on Learning &amp; Learning to Program I like</h2>

<ul>
<li><p><a href="http://rubyrogues.com/131-rr-how-to-learn/" target="_blank">Ruby Rogues 131 &ndash; How to Learn</a></p></li>
<li><p><a href="http://www.uvm.edu/~pdodds/files/papers/others/2007/ericsson2007a.pdf" target="_blank">HBR &ndash; The Making of an Expert</a></p></li>
<li><p><a href="http://www.gamedev.net/blog/355/entry-2250592-become-a-good-programmer-in-six-really-hard-steps/" target="_blank">Become a Good Programmer in Six Really Hard Steps</a></p></li>
<li><p><a href="http://catgrena.de/careers/2013/10/15/standing-out-from-the-crowd.html" target="_blank">Standing Our From the Crowd</a></p></li>
<li><p><a href="http://rubyrogues.com/159-rr-hacking-education-with-saron-yitbarek/" target="_blank">Ruby Rogues 159 &ndash; Hacking Education with Saron Yitbarek (Flatiron School Alum)</a></p></li>
<li><p><a href="https://www.youtube.com/watch?v=mW_xKGUKLpk" target="_blank">Reading Code Good &ndash; Saron&rsquo;s RailsConf2014 Talk</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Notes - Structs]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/03/07/structs/"/>
    <updated>2014-03-07T10:11:19-05:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/03/07/structs</id>
    <content type="html"><![CDATA[<p>I recently learned about Structs while working my way through <a href="http://pragmaticstudio.com/courses" target="_blank">Pragmatic Studio’s Ruby Programming course</a>, which I highly recommend btw.  If you’re a beginner like me it will apply your basic Ruby knowledge to a project and teach you some new things along the way&hellip;like Structs.</p>

<h2>What Are Structs</h2>


<p>Structs are simply a collection of attributes, meaning they only have state, whereas Classes have both attributes and methods (state and behavior).  To illustrate imagine we have a library class containing a bunch of book objects (its state) that you can check out and do other things to (its behavior). This type of object, since it has state and behavior warrants using a class.</p>

<p>``` ruby Library Class
class Library
  def initialize</p>

<pre><code>@books = []
</code></pre>

<p>  end</p>

<p>  def checkout</p>

<pre><code># code to checkout a book
</code></pre>

<p>  end
end<br/>
```
Now, let’s assume the book objects the library class will contain won’t have any behavior i.e. they won’t have methods, they’ll simply have attributes such as: <code>@title</code>, <code>@author</code>, and <code>@page_number</code>.  We could create a book class like this:</p>

<p>```ruby Book Class
class Book
  attr_reader :title, :author, :page_number</p>

<p>  def initialize(title, author, page_number)</p>

<pre><code>@title = title
@author = author
@page_number = page_number
</code></pre>

<p>  end
end
```
OR since the book object has no methods we can use a Struct like so:</p>

<p>```ruby Book Struct
Book = Struct.new(:title, :author, :page_number)</p>

<h1>=> Book</h1>

<p>Book.class</p>

<h1>=> Class</h1>

<p>```
Using a Struct required far less code than writing out the book class ourselves and by calling <code>.class</code> on Book we can see that <code>Struct.new</code> actually went and generated the book class we made above for us&hellip;pretty cool huh!</p>

<h2>Create Object Instances</h2>


<p>With this Book class we can create as many new book objects as we want by calling <code>Book.new</code> and passing it a title, author, and number of pages, like below:</p>

<p>```ruby
book1 = Book.new(“Learn to Program”, “Chris Pine”, 171)</p>

<h1>=> <struct Book title="Learn to Program", author="Chris Pine", page_number=171></h1>

<p>book2 = Book.new(“The Well Grounded Rubyist”, “David A. Black”, 500)</p>

<h1>=> <struct Book title="The Well Grounded Rubyist", author="David A. Black", page_number=500></h1>

<p>book3 = Book.new(“Programming Ruby 1.9 &amp; 2.0: The Pragmatic Programmers Guide (The Facets of Ruby)”, “Dave Thomas, Andy Hunt, Chris Fowler”, 888)</p>

<h1>=> <struct Book title="Programming Ruby 1.9 & 2.0: The Pragmatic Programmers' Guide (The Facets of Ruby)", author="Dave Thomas, Andy Hunt, Chris Fowler", page_number=888></h1>

<p>```
This code instantiated 3 new book objects each with readable and writable attributes.  One interesting thing about these book objects is they are actually Struct objects and therefore have some handy struct methods for accessing their attributes.</p>

<h2>Accessing Attributes</h2>


<p>In addition to the normal way of accessing class attributes you can also use the <code>[]</code> method to access attributes like you would from an array by inserting the index in the brackets or like you from a hash by inserting the key in the brackets.  Here are some examples:</p>

<p>```ruby Accessing Struct Attributes
book1[0]</p>

<h1>=> “Learn to Program”</h1>

<p>book1[“title”]</p>

<h1>=> “Learn to Program”</h1>

<p>book1[:title]</p>

<h1>=> “Learn to Program”</h1>

<p>```</p>

<p>As you can see you can access the <code>title</code> attribute by index or by name using a String or Symbol.</p>

<h2>Learn More About Structs</h2>




<ul>
  <li>You can see more Struct methods by checking out the <a href="http://ruby-doc.org/core-1.9.3/Struct.html" target="_blank">Struct Class doc</a>.</li>

  <li>For a more comprehensive explination of Structs read the blog post <a href="http://blog.rubybestpractices.com/posts/rklemme/017-Struct.html" target="_blank">Structs Inside and Out</a></li>

  <li>If you want to make Read-only Structs check out the <a href="https://github.com/janlelis/value_struct" target="_blank">Value Struct Gem</a> and this <a href="http://ruby.janlelis.de/65-value_struct-read-only-structs-in-ruby" target="_blank">blog post</a> about it.</li>
</ul>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.[ ] Method...Huh?]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/02/27/square-brackets-ruby-method/"/>
    <updated>2014-02-27T12:25:28-05:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/02/27/square-brackets-ruby-method</id>
    <content type="html"><![CDATA[<p>I came across the blog post <a href="http://sirupsen.com/what-I-wish-a-ruby-programmer-had-told-me-one-year-ago/" target="_blank">“What I Wish a Ruby Programmer Had Told Me One Year Ago”</a> and started reading through the author Simon’s code for the first iteration of his todo app to figure out what was going on.  One method he used was:
<code>ruby
def [](id)
  @list[id]
end
</code>
This had me pretty confused at first. Then when I looked at how he was running the code I saw he was calling this method like you would access an element in an array.
<code>ruby
list = TodoList.load("todo.td")
list[0].done = true
</code>
It turns out in Ruby you can use special characters to name methods including the array lookup syntax, square brackets.  In this way he names the method <code>[ ]</code> and passes it an <code>(id)</code>, which is then passed to the array <code>@list</code> to lookup that element in the <code>@list</code> array.  Essentially he’s creating a lookup on the instance of his class <code>TodoList</code>, so he can use <code>[ ]</code> to lookup specific todo items just like he would if here were accessing them in array, which technically he is&hellip;the @list array.  Pretty Cool!</p>

<p>Check out this Stackoverflow answer for some good examples of how to use the [ ] method, <a href="http://stackoverflow.com/questions/10018900/how-does-defining-square-bracket-method-in-ruby-work" target="_blank"><a href="http://stackoverflow.com/questions/10018900/how-does-defining-square-bracket-method-in-ruby-work">http://stackoverflow.com/questions/10018900/how-does-defining-square-bracket-method-in-ruby-work</a></a></p>

<p>Here is another great Stackoverflow answer about Ruby Method names, <a href="http://stackoverflow.com/questions/10542354/what-are-the-restrictions-for-method-names-in-ruby" target="_blank"><a href="http://stackoverflow.com/questions/10542354/what-are-the-restrictions-for-method-names-in-ruby">http://stackoverflow.com/questions/10542354/what-are-the-restrictions-for-method-names-in-ruby</a></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding a Feed Class &amp; CLI Interface to my Twitter Bot ]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/02/26/adding-a-feed-class-to-my-twitter-bot-and-cli-interface/"/>
    <updated>2014-02-26T06:47:41-05:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/02/26/adding-a-feed-class-to-my-twitter-bot-and-cli-interface</id>
    <content type="html"><![CDATA[<p>After reading the blog post <a href="http://sirupsen.com/what-I-wish-a-ruby-programmer-had-told-me-one-year-ago/" target="_blank">“What I Wish a Ruby Programmer Had Told Me One Year Ago”</a> and reading the code for his ToDo app I realized I should create a Feed class that has <a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete" target="_blank">CRUD</a> operations so I can list, add, edit, and delete my feeds.  It’s probably not the cleanest or most “ruby way" of doing it (if you have any suggestions please let me know) but it got the job done and I’ll refactor it to make it more rubish and/or turn it into a Sinatra app next.</p>

<p>```ruby</p>

<h1>class that stores feeds</h1>

<p>class Feed</p>

<pre><code>attr_accessor :file

def initialize(file = 'feeds.txt') # sets file to save feeds to, sets @feed array, and calls the list method 
    @file = file 
    @feeds = []

end 

def create # takes a feed from the user and adds it to the file 
    puts "Add feed"
    puts '&gt;&gt;'
    new_feed = gets.chomp
    File.open @file, 'a' do |f|
        f.puts new_feed
    end 
    puts "added the feed #{new_feed}"
end

def get_feeds #gets the feeds from the file and puts them in the @feeds array so they can be used by the .edit and .delete methods
    File.open(@file).readlines.each do |f|
        @feeds &lt;&lt; f.strip 
    end 
end 

def write_feeds #writes the @feeds array to the file so .edit and .delete can write the @feeds array they've changed to the file 
    File.open @file, 'w' do |f|
        @feeds.each {|feed| f.puts(feed)}
    end
end 

def edit(name) #takes a file name from the user and then checks if that exists in the @feeds array. 
    get_feeds  #If it does it gets the id and asks the user what they want to change the name to and then changes that index to the new name.
               #From here it calls the write_feeds method and writes the new array to the file 
    if @feeds.include?(name)
        index = @feeds.index(name)
        puts "What do you want to change #{name} to?"
        new_feed = gets.chomp
        @feeds[index] = new_feed
        write_feeds
    else 
        puts "no such feed"
    end 
    list
end 


def delete(name) #works almost the same as the .edit method but instead of changing the feed name it deletes it
    get_feeds

    if @feeds.include?(name) 
        index = @feeds.index(name)
        puts "Are you sure you want to delete #{name}?"
        puts "Enter 'yes' or 'no':"
        answer = gets.chomp.downcase
        if answer == "yes"
            @feeds.delete_if {|feed| feed == name}
            write_feeds
            puts "Feed #{name} has been deleted."
        else 
            puts "Ok I won't delete it then."
        end 
    else 
        puts "Sorry don't have that file."
    end 
end 

def list #if the feeds.txt file is empty it asks for feeds, if not it puts the feeds from the file 
    read_file = File.read @file
    if read_file.empty?
        puts "the file is empty please add some feeds"
        create
    else
        puts "here is the list of feeds from file #{@file}" 
        puts read_file
    end 
end 
</code></pre>

<p>end
```</p>

<p>After finishing this I decided I wanted to add some sort of command line interface so I could list out, add, edit, and delete the feeds from my terminal. I also added the -tweet command which runs the FeedParser class and begins tweeting out the feeds.  I realize there is an options parser library I could use for this but I wanted to design and build my own.</p>

<p>```ruby
require_relative &lsquo;feed&rsquo;
require_relative &lsquo;feed_parser&rsquo;</p>

<p>class CommandLineInterface #allows user to interact with feed.rb to list, add, edit, and delete</p>

<pre><code>def initialize 
    @feeds = Feed.new
    take_commands
end 

def take_commands
    puts "What do you want to do?  To see list of commands enter -commands"
    until false 
    response = gets.chomp.downcase
    parse_response(response)
    end 
end 

def parse_response(response)
    if response == "-commands"
        puts "-list   - list your feeds"
        puts "-add    - add a new feed"
        puts "-edit   - edit an existing feed"
        puts "-delete - delete an existing feed"
        puts "-tweet  - tweets out the feeds" 
        puts "-quit  - quit this program"

    else 
        case response 
        when "-list"
            @feeds.list
        when "-add"
            @feeds.add
        when "-edit"
            puts "feed name:"
            name = gets.chomp
            @feeds.edit(name)
        when "-delete"
            puts "feed name:"
            name = gets.chomp
            @feeds.delete(name)
        when "-tweet"
            parser = FeedParser.new(@feeds.get_feeds)
            parser.run

        when "-quit"
            exit 
        else 
            p 'not a valid command'
        end 
    end 
    take_commands
end 
</code></pre>

<p>end</p>

<p>cli = CommandLineInterface.new<br/>
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recoding My RSS Twitter Bot]]></title>
    <link href="http://kylefdoherty.github.io/blog/2014/02/19/recoding-my-rss-twitter-bot/"/>
    <updated>2014-02-19T06:03:44-05:00</updated>
    <id>http://kylefdoherty.github.io/blog/2014/02/19/recoding-my-rss-twitter-bot</id>
    <content type="html"><![CDATA[<p>My last blog post about my RSS Twitter Bot made realize a lot of flaws with my bot, not only in the code I wrote but the choices I made about what to code.  This led me to re-code the entire bot, but I think the code is much cleaner now.</p>

<!-- more -->


<p>```ruby  Recoded RSS Twitter Bot
require &lsquo;rss&rsquo;
require &lsquo;open-uri&rsquo;
require &lsquo;twitter&rsquo;
require &lsquo;yaml&rsquo;</p>

<p>class FeedParser</p>

<pre><code>def initialize(*feeds)
    @feeds = feeds 
    @tweet = ""
    @pub_date = ""
    @tweet_length = Proc.new{ 
        if @tweet.length &gt; 140
            next 
        else 
            tweeter(@tweet)
            puts "tweeted"

            sleep(15)
        end 
    }

    config = YAML.load_file('config.yml')

    @client = Twitter::REST::Client.new({
        consumer_key: config['consumer_key'],
        consumer_secret: config['consumer_secret'],
        access_token: config['access_token'],
        access_token_secret: config['access_token_secret']
    })

end 

def run 
    feed_sorter
end 
</code></pre>

<h1>method that sorts feeds</h1>

<pre><code>def feed_sorter
    @feeds.each do |url|
        open(url) do |rss|
        feed = RSS::Parser.parse(rss)

            case 
            when feed.feed_type == "rss"
                rss_parser(feed)
            when feed.feed_type == "atom"
                atom_parser(feed) 
            end 
        end 
    end 
end 

def rss_parser(rss)
    rss.items.each do |item| 
        title = item.title
        link = item.link
        @tweet = "#{title} #{link}"
        @tweet_length.call 

    end 
end 


def atom_parser(atom)
    atom.items.each do |item| 
        title = item.title.content
        link = item.link.href
        @tweet = "#{title} #{link}"
        @tweet_length.call

    end 
end 

def tweeter(tweet)
    @client.update(tweet)
end 
</code></pre>

<p>end</p>

<p>parser = FeedParser.new(&lsquo;<a href="https://gdata.youtube.com/feeds/api/users/goaztecscom/uploads">https://gdata.youtube.com/feeds/api/users/goaztecscom/uploads</a>&rsquo;, &lsquo;<a href="http://www.utsandiego.com/rss/headlines/sports/sdsu-aztecs/">http://www.utsandiego.com/rss/headlines/sports/sdsu-aztecs/</a>&rsquo;)
parser.run
```</p>

<h2>I Switched to the RSS Module</h2>


<p>During and after writing the first post about my Twitter Bot I did more research into the Ruby RSS Module and found that it has <code>.feed_type</code> method that allows you to easily sort the types of feeds so you can use the correct methods to parse them.  Sorting the feeds this way is infinitely better than the weird/incorrect way I was doing it before albeit it was good practice with hashes.</p>

<p>```ruby Sorting Feeds with the RSS Module
@feeds.each do |url|</p>

<pre><code>open(url) do |rss|
feed = RSS::Parser.parse(rss)

    case 
    when feed.feed_type == "rss"
        rss_parser(feed)
    when feed.feed_type == "atom"
        atom_parser(feed) 
    end 
end 
</code></pre>

<p>end
```</p>

<h2>I Finally Used a Proc in my Code</h2>


<p>I remember learning about Procs and Lamdas on Codecademy and thinking they were pretty cool&hellip;ok really cool.  Since that time I haven’t used them in my code, accept when trying to code FizzBuzz in as many different ways as possible, which sort of makes sense since everything I’m doing is super simple, but still&hellip;I want to use a some damn Procs.</p>

<p>Finally, I found a reason.  When re-coding my bot I decided there was no reason to try and adjust the length of the feed titles because eventually my bot will hopefully use a URL shortener, meaning 99.99% of the time the titles will never make the tweet go over 140 characters.  Still I needed an easy way to keep <code>@tweets</code> that are over 140 characters from being sent to the <code>.tweeter</code> method and causing an error.  Obviously, I could stick an if/else statement in a method and call it from the &lt;.rss> and &lt;.atom> methods, but using a Proc sounded way more fun :).</p>

<p>```ruby Using a Proc
@tweet_length = Proc.new{
if @tweet.length > 140</p>

<pre><code>    next 
else 
    tweeter(@tweet)
    puts "tweeted"
    sleep(15)
end 
</code></pre>

<p>}
```</p>

<h2>Next Steps</h2>


<ol>
  <li>Check for new articles, videos, etc. in the feeds and only tweet the new ones</li>
  <li>Learn Sinatra and turn this into a Sinatra App</li>
  <li>Add a url shortner like bit.ly or roll my own</li>
</ol>

]]></content>
  </entry>
  
</feed>
